{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Distributed_Cancer_Recognition_based_on_CERN_Data.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "58562cc2a7f64e45a85c7d50221323fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_c05737efe5774ebdbbf7016ba0d2d918",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_408baeb9b5a84296aeb8808328e74ab3",
              "IPY_MODEL_ec87df54e8544a17b4495c8e609c2ce6"
            ]
          }
        },
        "c05737efe5774ebdbbf7016ba0d2d918": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "408baeb9b5a84296aeb8808328e74ab3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_98b645fceb9f4cb3b77cd24ba1938348",
            "_dom_classes": [],
            "description": "",
            "_model_name": "IntProgressModel",
            "bar_style": "success",
            "max": 500,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 500,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a467e0a692614b7f90594d5f16f6c351"
          }
        },
        "ec87df54e8544a17b4495c8e609c2ce6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_57b2e0dd911348678dcaecc3eeae74f3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "100% 500/500 [02:04&lt;00:00,  4.13it/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b2ee398f2d0f4040b02c7552c6c8c27c"
          }
        },
        "98b645fceb9f4cb3b77cd24ba1938348": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a467e0a692614b7f90594d5f16f6c351": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "57b2e0dd911348678dcaecc3eeae74f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b2ee398f2d0f4040b02c7552c6c8c27c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "27b00c3dedb149f6b0bff2a200c00b89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_2772f3cfe1c1437498747c4ab23902aa",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_85b03c494f9b4b6ab635f5015c73f6c6",
              "IPY_MODEL_c23f44bc0a7e421db61c42616605451b"
            ]
          }
        },
        "2772f3cfe1c1437498747c4ab23902aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": "row wrap",
            "width": "800px",
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": "inline-flex",
            "left": null
          }
        },
        "85b03c494f9b4b6ab635f5015c73f6c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_f79cb8fa8adf4cd4b11e99697bd3f4dd",
            "_dom_classes": [],
            "description": "Progression: ",
            "_model_name": "IntProgressModel",
            "bar_style": "success",
            "max": 500,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 500,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8612e531a1304ea18841b50db87fddda"
          }
        },
        "c23f44bc0a7e421db61c42616605451b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9d947443cb4b4453a9ea9e5c5c2acfb4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "100% 500/500 [04:00&lt;00:00,  2.15 iters/s, Loss=263.77042]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1ee1a7a4c01c477f9155b771e85c0de0"
          }
        },
        "f79cb8fa8adf4cd4b11e99697bd3f4dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8612e531a1304ea18841b50db87fddda": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": "2",
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9d947443cb4b4453a9ea9e5c5c2acfb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1ee1a7a4c01c477f9155b771e85c0de0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6af245af53014b6aa0650968eedbab66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_ffb752696c814ccfafd6dc1182fe844b",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_7641d0ac9ed842848ab4d46b23b83f4d",
              "IPY_MODEL_6607d2ab5103463ab1ca00a07556be6c"
            ]
          }
        },
        "5df2e10c2d964fa395e0f52195e45754": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5b0723744c4d4958be76c51ac4904b21",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_0183c94cc52b48c79a369ec84e03f7f3",
              "IPY_MODEL_fae6e9e39d604d3d88c5379c62bd6401"
            ]
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aaVGrnGB-LMu",
        "colab_type": "text"
      },
      "source": [
        "# ***MRI Imaging Classification via Concatenated Neural Network Architectures and  Distributed Stochastic Training via Successive Convex Approximations***\n",
        "### ***Neural Networks for Data Science Applications (2019/2020)***\n",
        "\n",
        "![logo](https://cdn1.alternatememories.com/images/intro/science/xcern-logo-1_300x300.jpg.pagespeed.ic.cWGdPe3lff.jpg)\n",
        "\n",
        "- *Students*:\n",
        "  - Claudio Battiloro (1869574)\n",
        "  - Federica Spoto (1704534)\n",
        "  - Lorenzo Giusti (1699406)\n",
        "\n",
        "- *Reference Papers*: \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "1. \"A framework for parallel and distributed training of neural networks\", Simone Scardapane and Paolo Di Lorenzo , *NEURAL NETWORK 91 (2017)*\n",
        "2.   \"Stochastic Training of Neural Networks via Successive Convex Approximations\", Simone Scardapane and Paolo di Lorenzo, *IEEE TRANSACTIONS ON NEURAL NETWORKS AND LEARNING SYSTEMS (2018)*\n",
        "3.   \"Distributed Stochastic Nonconvex Optimization and\n",
        "Learning based on Successive Convex Approximation\", Paolo Di Lorenzo and Simone Scardapane,  *ASILOMAR CONFERENCE ON SIGNALS, SYSTEMS AND COMPUTERS (2019)*\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## **Brain Cancer Recognition, Distributed Training and Frameworks Comparison**\n",
        "\n",
        "\n",
        "\n",
        "### - ***Report***\n",
        "\n",
        "The project is mainly divided in three parts:\n",
        "\n",
        "1) **_Proposing and describing an architecture for Brain Cancer Recognition trained on CERN data_**. \n",
        "\n",
        " \n",
        "\n",
        "Distinguish if there's a tumor or not inside a magnetic resonance image (MRI) is a very hard and time consuming task even for the most experienced doctors.\n",
        "Artificial intelligence (AI) in medical imaging is a potentially disruptive technology. An understanding of the principles and application of [radiomics](https://en.wikipedia.org/wiki/Radiomics) (the process of extracting useful imaging features from radiological data) and deep learning techniques is an essential foundation to weave design solutions that accommodate ethical and regulatory requirements and to craft AI-based algorithms that enhance outcomes, quality, and efficiency. Moreover, a more holistic perspective of applications, opportunities, and challenges from a programmatic perspective contributes to ethical and sustainable implementation of AI solutions.\n",
        "Numerous computer-aided diagnosis (CAD) systems have been recently presented in the history of medical imaging to assist radiologists about their patients. For full assistance of radiologists and better analysis of magnetic resonance imaging (MRI), multi-grade classification of brain tumor is an essential procedure.\n",
        "\n",
        "The images inside the dataset are all about brain anomalies, such as: Edema, Tumor or other neuropathologies; so you cannot find an MRI of an healthy brain in our data. We've computed the corresponding radiomics vector using the [pyradiomics](https://pyradiomics.readthedocs.io/en/latest/) library for each image. \n",
        "\n",
        "Since our task is to detect the presence of a tumor, our target classes are: \"Tumor\" & \"No Tumor\", leading to a binary classification task.  \n",
        "\n",
        "A full brain MRI with a clearly visible tumor looks like the following figure:\n",
        "\n",
        "\n",
        "<img src=\"https://prod-images-static.radiopaedia.org/images/5651/b510dc0d5cd3906018c4dd49b98643.jpg\" align=\"center\" alt=\"drawing\" width=\"200\" height=\"200\"/>\n",
        "\n",
        "\n",
        "Since an high percentage of the image is useless for our purpose, we have decided to use only the region in which the anomaly is present. For example, the previous image is cropped as follows:\n",
        "\n",
        "<img src=\"https://i.imgur.com/wyNQrTO.jpg\" align=\"center\" alt=\"drawing\"/>\n",
        "\n",
        "In this project, we propose a novel neural network architecture based on combining magnetic resonance imaging and radiomics into a single neural model with the claim that training a model with heterogeneous data has better performances of a model which uses only homogeneous features. So, we've combined MRIs and raw data (numerical and categorical) into a single model as in the next schema. \n",
        "\n",
        "<img src=\"https://www.pyimagesearch.com/wp-content/uploads/2019/02/keras_multi_input_header.png\" align=\"center\" alt=\"drawing\" width=\"200\" height=\"200\"/>\n",
        "\n",
        "The first branch (on the left) will be a simple Feed Forward Neural Network (FNN) with two fully connected layers where each of them has 32 neurons with a dropout probability of 10%, designed to handle the categorical/numerical inputs. The second branch (on the right) will be a Convolutional Neural Network to operate over the image data. The CNN architecture is the popular VGG-16 Convolutional Neural Network. VGG-16 (shown in the following figure) is a CNN model proposed by the Visual Geometry Group of the University of Oxford in the paper “Very Deep Convolutional Networks for Large-Scale Image Recognition”. The model achieves 92.7% top-5 test accuracy on ImageNet, a dataset consisting of over 14 million images belonging to 1000 classes. \n",
        "\n",
        "<img src=\"https://neurohive.io/wp-content/uploads/2018/11/vgg16-1-e1542731207177.png\" align=\"center\" alt=\"drawing\" width=\"500\" height=\"250\"/>\n",
        "\n",
        "These branches will then be concatenated together to form the final multi-input model based on the feature mappings of the previous ones. Due to privacy issues and to the fact that the final dataset is currently being updated, we have few data (1055 images and radiomics vectors) and so we decided to perform a fine tuning operation, consisting of using the VGG-16 ImageNet weights as initialization for our network parameters. \n",
        "\n",
        "\n",
        "2) **_Describing and Implementing  a quite new Optimization Techinique named as Successive Convex Approximation (SCA) for our application_.**\n",
        "\n",
        "From paper [2]: \"The basic idea is to iteratively replace the original (non-convex, highly dimensional) learning problem with a sequence of (strongly convex) approximations, which are both accurate and simple to optimize. Differently from similar ideas (e.g., quasi-Newton algorithms), the approximations can be constructed using only first-order information of the neural network function, in a stochastic fashion, while exploiting the overall structure of the learning problem for a faster convergence. We discuss several use cases, based on different choices for the loss function (e.g., squared loss and cross-entropy loss), and for the regularization of the NN’s weights.\"\n",
        "We experiment the algorithm on our architecture. The results show how it outperforms SGD, providing faster convergence to a better minimum.\n",
        "\n",
        "We want to train a generic NN $f(w;x)$, which takes as input a real-valued vector $x \\in \\mathbb{R}^d$, outputs a scalar value and depends on $Q$ parameters (weigths, $w \\in \\mathbb{R}^Q$).\n",
        "We are provided with a training dataset of $N$ input/output pairs $S = \\{x_i,y_i\\}_{i = 1}^N$, and the learning task aims at solving the following regularized optimization problem:\n",
        "\n",
        "$$\\min_w \\frac{1}{N} \\sum_{i=1}^N l(y_i,f(w;x_i))+\\lambda r(w) \\,\\,\\, (1)$$\n",
        "\n",
        "where $l(·, ·)$ is a convex, smooth loss function, while $r(·)$ is a (possibly non-\n",
        "smooth) convex regularization term, and $\\lambda > 0$ is a user-defined scalar that weights the two terms.\n",
        "\n",
        "The SCA idea is to introduce a convex surrogate $\\tilde{l}_i(\\cdot;w^n)$ f the non-convex $l_i(\\cdot)$, - short hand notation, the index $i$ refers to function evaluation in $\\{x_i,y_i\\}$ - where $w^n$ are the current weigths estimates such that some mild conditions (differentiability and Lipshitz gradient) are respected and :\n",
        "\n",
        "$$\\nabla l_i(w)=\\nabla \\tilde{l}_i(w;w)$$\n",
        "\n",
        "\n",
        "The whole procedure is mainly based on the choice of the surrogate loss function. In our case, we decided to use its first order linearization:\n",
        "\n",
        "$$\\tilde{l}_i(w;w^n) = l_i(w^n) + \\nabla l_i(w^n)(w-w^n)\\,\\,\\,(2)$$\n",
        "\n",
        "We consider an $l_2$ regularization (strongly convex surrogate problem) and the resulting algorithm becomes:\n",
        "\n",
        "<div>\n",
        "<img src=\"https://i.ibb.co/fxhdcF4/Screenshot-2020-02-04-at-10-38-03.png\" align=\"center\" width=\"500\">\n",
        "</div>\n",
        "\n",
        "Using this surrogate loss, as the reader can notice, the SCA algorithm resembles a simpler variant of Adam.\n",
        "\n",
        "We implement the L-SCA Algorithm both in Tensorflow and JAX and we show a comparison.\n",
        "\n",
        "3) ***Describing and Implementing a brand new distributed optimization technique named as Stochastic In Network Non-convex Optimization (S-NEXT)***. \n",
        "\n",
        "The algorithmic framework hinges on SCA together with Dynamic Consensus steps in order to have statistics and gradient tracking.\n",
        "\n",
        "Consider the problem in (1) and a network composed of $I$ autonomous agents aiming to cooperatively and distributively solve it. The network (and so the communication patterns) are modeled with an undirected connected graph $\\mathcal{G}(\\mathcal{V},\\mathcal{E})$ assumed to have a double-stochastic adjacency matrix $\\mathbf{W}$. We can rewrite problem (1) exploting the splitting by example (data) on the network as:\n",
        "\n",
        "$$\\frac{1}{N} \\sum_{i=1}^N l(y_i,f(w;x_i))+\\lambda r(w) = \\frac{1}{N}\\sum_{i=1}^I \\sum_{j=1}^{N_i}  l(y_j,f(w;x_j))+\\lambda r(w)$$\n",
        "\n",
        "where $N_i$ is the number of data available for the $i-th$ agent.\n",
        "\n",
        "Considering again as surrogate loss (per each agent) the loss linearization around current weights estimates, the resulting algorithm becomes:\n",
        "\n",
        "<div>\n",
        "<img src=\"https://i.ibb.co/PY3Z26m/Screenshot-2020-02-04-at-10-38-31.png\" height=\"800\" width = \"500\">\n",
        "</div>\n",
        "\n",
        "Due to the difficulties of simulating a distributed training on a real complex architecture, we test the proposed procedure on a toy-architecture and we compare it against Distributed SGD.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l9SzthMSs8PK",
        "colab_type": "text"
      },
      "source": [
        "## - ***Core Code***\n",
        "\n",
        "In this section we present the code for  our application in the same order of the report. In some parts the code may seem improvable in terms of wrapping or redundancy (mainly on overwriting parameters or repeating comments), but we thought that is very important to provide a story-telling and a logical step-by-step explanation of what we've done due to the fact that this is a didactic and tutorial work."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dy2qH1BiWOdL",
        "colab_type": "text"
      },
      "source": [
        "### -- ***External Libraries for TF implementation***\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rjqa7ruCTzkm",
        "colab_type": "code",
        "outputId": "95633226-83a3-43f3-c951-d15757f9be49",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "%matplotlib inline\n",
        "!pip install --quiet tensorflow==2.0.0 \n",
        "!pip install brewer2mpl\n",
        "\n",
        "import tensorflow as tf\n",
        "print(tf.__version__)\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import json\n",
        "from os.path import exists\n",
        "from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler\n",
        "\n",
        "from tensorflow.keras.backend import clip\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, concatenate\n",
        "from tensorflow.keras.layers import Conv2D, GlobalAveragePooling2D, MaxPool2D\n",
        "\n",
        "\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.regularizers import l1_l2\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
        "for gpu in gpus:\n",
        "    tf.config.experimental.set_memory_growth(gpu, True)\n",
        "\n",
        "np.random.seed(26)\n",
        "tf.random.set_seed(26)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: brewer2mpl in /usr/local/lib/python3.6/dist-packages (1.4.1)\n",
            "2.0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hXfD0r4Ntbnt",
        "colab_type": "text"
      },
      "source": [
        "### -- ***Data Importing and Processing***\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xav_mWCVUmZx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!pip install -q -U PyDrive"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N1HcdLLDUryy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import PyDrive and associated libraries.\n",
        "# This only needs to be done once per notebook.\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "\n",
        "# Authenticate and create the PyDrive client.\n",
        "# This only needs to be done once per notebook.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gjo9Gy-AnZoX",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Data Downloading and Pre-Trained Wights*** \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h9ppkYfNNj1H",
        "colab_type": "code",
        "outputId": "9c2d542a-e3d3-47bb-c3f2-9d82137aa17b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "# Download the file based on its file ID.\n",
        "file_id = '1ksUkpFbHZPTmOSMvd9RHfb_3l6k7ktLK'\n",
        "downloaded = drive.CreateFile({'id': file_id})\n",
        "downloaded.GetContentFile('NN.zip')\n",
        "!unzip -q NN.zip\n",
        "\n",
        "#get metrics for sgd training:\n",
        "file_id = '1klsgWacFzqnvTwdP861BaPSsyxyDi-fo'\n",
        "downloaded = drive.CreateFile({'id': file_id})\n",
        "downloaded.GetContentFile('sgd.json')\n",
        "!mv sgd.json NN/\n",
        "\n",
        "#get metrics for adam training:\n",
        "file_id = '1UtFoqnJ4xdmOHehvdiL2JiFwRBickViq'\n",
        "downloaded = drive.CreateFile({'id': file_id})\n",
        "downloaded.GetContentFile('adam.json')\n",
        "!mv adam.json NN/\n",
        "\n",
        "file_id = '1J7QHwoKV-5Bm1SjKd9gTm6dwEwPMYxul'\n",
        "downloaded = drive.CreateFile({'id': file_id})\n",
        "downloaded.GetContentFile('sca.json')\n",
        "!mv sca.json NN/\n",
        "\n",
        "\n",
        "!ls NN"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "adam.json  sgd.json    vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "radiomics  train\n",
            "sca.json   validation\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZKjtsuhhY8Xr",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Feature Selection*** \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6GXR0EzXWcrr",
        "colab_type": "text"
      },
      "source": [
        "The next list contains the names of the best 35 radiomics features out of 1416 which will be used as \"raw\" data for the FF branch of the joint neural network.\n",
        "\n",
        "The selection criteria is based on XGBoost's Gain: the improvement in accuracy brought by a feature to the branches it is on. More in particular, the Gain implies the relative contribution of the corresponding feature to the model calculated by taking each feature's contribution for each tree in the model. A higher value of this metric when compared to another feature implies it is more important for generating a prediction."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wlKm_A03TzfJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cols= ['wavelet-HHH_gldm_GrayLevelNonUniformity',\n",
        "       'lbp-2D_glrlm_ShortRunEmphasis',\n",
        "       'square_glrlm_RunLengthNonUniformity',\n",
        "       'lbp-2D_gldm_DependenceNonUniformityNormalized',\n",
        "       'original_shape_Maximum2DDiameterRow',\n",
        "       'wavelet-LLH_gldm_GrayLevelNonUniformity',\n",
        "       'original_shape_SurfaceVolumeRatio',\n",
        "       'original_shape_Maximum3DDiameter',\n",
        "       'wavelet-LHL_gldm_DependenceNonUniformity',\n",
        "       'lbp-2D_firstorder_TotalEnergy', 'lbp-2D_gldm_DependenceVariance',\n",
        "       'gradient_gldm_DependenceNonUniformityNormalized',\n",
        "       'lbp-2D_glszm_SmallAreaLowGrayLevelEmphasis',\n",
        "       'wavelet-LLL_ngtdm_Strength',\n",
        "       'wavelet-HHL_gldm_GrayLevelNonUniformity',\n",
        "       'original_glszm_LargeAreaEmphasis',\n",
        "       'wavelet-LHH_glszm_SizeZoneNonUniformity',\n",
        "       'lbp-2D_gldm_SmallDependenceEmphasis',\n",
        "       'logarithm_glszm_GrayLevelNonUniformityNormalized',\n",
        "       'wavelet-LLL_firstorder_Range',\n",
        "       'lbp-2D_glrlm_LongRunLowGrayLevelEmphasis',\n",
        "       'lbp-2D_glrlm_RunPercentage', 'original_shape_MajorAxisLength',\n",
        "       'original_shape_Flatness', 'original_glcm_Imc2',\n",
        "       'wavelet-HLH_glcm_MaximumProbability',\n",
        "       'wavelet-LLH_firstorder_RootMeanSquared',\n",
        "       'wavelet-LHH_glcm_DifferenceAverage',\n",
        "       'wavelet-HLL_firstorder_RobustMeanAbsoluteDeviation',\n",
        "       'squareroot_glcm_JointEntropy',\n",
        "       'original_shape_Maximum2DDiameterSlice',\n",
        "       'original_shape_MinorAxisLength',\n",
        "       'exponential_firstorder_Uniformity',\n",
        "       'square_glrlm_HighGrayLevelRunEmphasis',\n",
        "       'exponential_glszm_LargeAreaEmphasis', 'Label', 'Image_Name']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OfKUJ-DKWcGU",
        "colab_type": "text"
      },
      "source": [
        " Define a function which loads the radiomics dataset.\n",
        "\n",
        "From [Wikipedia](https://en.wikipedia.org/wiki/Radiomics):\n",
        "In the field of medicine, radiomics is a method that extracts large amount of features from radiographic medical images using data-characterisation algorithms. These features, termed radiomic features, have the potential to uncover disease characteristics that fail to be appreciated by the naked eye. The hypothesis of radiomics is that the distinctive imaging features between disease forms may be useful for predicting prognosis and therapeutic response for various conditions, thus providing valuable information for personalized therapy. Radiomics emerged from the medical field of oncology and is the most advanced in applications within that field. However, the technique can be applied to any medical study where a disease or a condition can be imaged. \n",
        "\n",
        "Usage:\n",
        "\n",
        "---\n",
        "Load the dataset with default parameters, the dataset is under the following \n",
        "root directory: \"./NN/radiomics/\" and the data will not be scaled:\n",
        "```\n",
        "X_train, y_train, X_valid, y_valid = load_radiomics()\n",
        "```\n",
        "\n",
        "---\n",
        "Load the dataset passing a scaler, the dataset is under the following \n",
        "root directory: \"./NN/radiomics/\" and the data will be scaled according to the algorithm passed as parameter:\n",
        "```\n",
        "X_train, y_train, X_valid, y_valid = load_radiomics(scaler=MinMaxScaler())\n",
        "```\n",
        "\n",
        "---\n",
        "Load the dataset passing a scaler, the dataset is under the directory passed as formal parameter and the data will be scaled according to the algorithm passed as parameter:\n",
        "```\n",
        "X_train, y_train, X_valid, y_valid = load_radiomics(radiomics_features_path=r\"./MyCustomDir/radiomics/\", \n",
        "                                                   scaler=MinMaxScaler())\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0sXZvEaXGF4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def load_radiomics(radiomics_features_path=r\"./NN/radiomics/\", scaler=None):\n",
        "  \"\"\" \n",
        "      Function that performs the loading of radiomics dataset\n",
        "\n",
        "      Parameters:\t\n",
        "      ----------\n",
        "\n",
        "      radiomics_features_path - The root directory in which you should hve the following files:\n",
        "      radiomics_train_tumor_feature.csv - Training features of the tumor class \n",
        "      radiomics_train_no_tumor_feature.csv - Training features of the non tumor class \n",
        "      radiomics_valid_tumor_feature.csv - Validation features of the tumor class\n",
        "      radiomics_valid_no_tumor_feature.csv -  Validation features of the non tumor class\n",
        "    \n",
        "      ----------\n",
        "\n",
        "      Returns:\tA tuple containing the data ordered as follows : (X_train, y_train, X_valid, y_valid)\n",
        "      X_train: np.array of float32 with shape (1055, 35) \n",
        "      y_train: np.array of float32 with shape (1055, 2) --> Label is One-Hot Encoded\n",
        "\n",
        "      X_valid: np.array of float32 with shape (182, 35) \n",
        "      y_valid: np.array of float32 with shape (182, 2) --> Label is One-Hot Encoded\n",
        "\n",
        "      ----------\n",
        "      \"\"\"\n",
        "\n",
        "  X_train_tumor = pd.read_csv(radiomics_features_path + \"radiomics_train_tumor_feature.csv\", usecols=cols)\n",
        "  X_train_no_tumor = pd.read_csv(radiomics_features_path + \"radiomics_train_no_tumor_feature.csv\", usecols=cols)\n",
        "\n",
        "  X_valid_tumor = pd.read_csv(radiomics_features_path + \"radiomics_valid_tumor_feature.csv\", usecols=cols)\n",
        "  X_valid_no_tumor = pd.read_csv(radiomics_features_path + \"radiomics_valid_no_tumor_feature.csv\", usecols=cols)\n",
        "\n",
        "  # Append both classes.  -- The shuffle part will be done after\n",
        "  X_train = X_train_no_tumor.append(X_train_tumor, ignore_index=True)#.sample(frac=1)\n",
        "  X_valid = X_valid_no_tumor.append(X_valid_tumor, ignore_index=True)#.sample(frac=1)\n",
        "\n",
        "  # Label goes in a separate variable\n",
        "  y_train = X_train['Label'].to_numpy()\n",
        "  y_valid = X_valid['Label'].to_numpy()\n",
        "\n",
        "  # The classes are mapped from a string to a boolean number\n",
        "  y_train = np.vectorize({'Tumor':1, 'No_Tumor':0}.get)(y_train)\n",
        "  y_valid = np.vectorize({'Tumor':1, 'No_Tumor':0}.get)(y_valid)\n",
        "\n",
        "  # One-hot encode of the labels\n",
        "  num_classes = 2\n",
        "  y_train = tf.keras.utils.to_categorical(y_train, num_classes)\n",
        "  y_valid = tf.keras.utils.to_categorical(y_valid, num_classes)\n",
        "\n",
        "  # We don't need anymore these features in the training set (Image_Name is only for euristics)\n",
        "  del X_train['Label']\n",
        "  del X_train['Image_Name']\n",
        "\n",
        "  del X_valid['Label']\n",
        "  del X_valid['Image_Name']\n",
        "\n",
        "  # Perform the casting from pd.DataFrame to np.ndarray\n",
        "  X_train = X_train.to_numpy()\n",
        "  X_valid = X_valid.to_numpy()\n",
        "\n",
        "  # Scale the features according to the scaler passed as parameter; \n",
        "  # if scaler=None, the scaling is not performed\n",
        "  if scaler is not None:\n",
        "    X_train = scaler.fit_transform(X_train)\n",
        "    X_valid = scaler.transform(X_valid)\n",
        "\n",
        "  return X_train, y_train, X_valid, y_valid"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0nnvHPKtXGYc",
        "colab_type": "text"
      },
      "source": [
        "Get the data scaled with [Robust Scaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html) scaling algorithm."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D_DJFXKdXGjc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, y_train, X_valid, y_valid = load_radiomics(scaler=RobustScaler())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OFrUnk9cXGs9",
        "colab_type": "text"
      },
      "source": [
        "Define a function which loads the images dataset, a rescaling size is passed as tuple in the parameters.\n",
        "\n",
        "Usage:\n",
        "\n",
        "---\n",
        "Load the images dataset with default parameters: the images will be scaled according to the default target size which is 64x64\n",
        "```\n",
        "train_images, y_train_img, valid_images, y_valid_img = load_images()\n",
        "```\n",
        "\n",
        "\n",
        "---\n",
        "Load the images dataset passing the desired target size: the images will be scaled according to the tuple passed as parameter\n",
        "```\n",
        "train_images, y_train_img, valid_images, y_valid_img = load_images(target_size=(128,128))\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fTT3ThivXG2G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def load_images(target_size=(64,64)):\n",
        "  \"\"\" \n",
        "      Function that performs the loading of images dataset\n",
        "\n",
        "      Parameters:\t\n",
        "      ----------\n",
        "            target_size -- Final shape of the loaded images. By default the image data generator reshape the image into (256, 256) \n",
        "      ----------\n",
        "\n",
        "      Returns:\tA tuple containing the data ordered as follows : (train_images, y_train_img, valid_images, y_valid_img)\n",
        "      train_images: np.array of float32 with shape (1055, target_size[0], target_size[1], 3) \n",
        "      y_train_img: np.array of float32 with shape (1055, 2) --> Label is One-Hot Encoded. Obsolete (we have the radiomics label)\n",
        "\n",
        "      valid_images: np.array of float32 with shape (182, target_size[0], target_size[1], 3) \n",
        "      y_valid: np.array of float32 with shape (182, 2) --> Label is One-Hot Encoded\n",
        "\n",
        "      ----------\n",
        "  \"\"\"\n",
        "  train_datagen = ImageDataGenerator(\n",
        "          rescale=1./255,            # normalize pixel values to [0,1]\n",
        "          shear_range=0.2,\n",
        "          zoom_range=0.2,\n",
        "          rotation_range=20,\n",
        "          width_shift_range=0.2,\n",
        "          brightness_range=[0.5, 1.5],\n",
        "          height_shift_range=0.2,\n",
        "          horizontal_flip=True,\n",
        "          vertical_flip=True)\n",
        "\n",
        "\n",
        "  train_generator = train_datagen.flow_from_directory(\n",
        "      r\"./NN/train\",\n",
        "      target_size=target_size,\n",
        "      batch_size=1056,\n",
        "      shuffle=False)\n",
        "\n",
        "\n",
        "  val_datagen = ImageDataGenerator(\n",
        "          rescale=1./255)\n",
        "\n",
        "  validation_generator = val_datagen.flow_from_directory(\n",
        "      r\"./NN/validation\",\n",
        "      target_size=target_size,\n",
        "      batch_size=182,\n",
        "      shuffle=False)\n",
        "\n",
        "  train_images, y_train_img = train_generator.next()\n",
        "  valid_images, y_valid_img = validation_generator.next()\n",
        "  return train_images, y_train_img, valid_images, y_valid_img"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KftJm2rFd-g8",
        "colab_type": "code",
        "outputId": "b21c4e60-fee1-4a6d-e342-38718269467b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "train_images, y_train_img, valid_images, y_valid_img = load_images()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 1056 images belonging to 2 classes.\n",
            "Found 182 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gDt0ct4Rtk7c",
        "colab_type": "text"
      },
      "source": [
        "### -- ***Main Architecture in TF***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PhJOEymaeGfA",
        "colab_type": "text"
      },
      "source": [
        "VGG16 was one of the famous model submitted to ILSVRC-2014. It makes the improvement over AlexNet by replacing large kernel-sized filters (11 and 5 in the first and second convolutional layer, respectively) with multiple 3×3 kernel-sized filters one after another. \n",
        "\n",
        "Since we know that the performance of the neural network are highly dependeny on weight initialization, we've chosen to use the (quasi-)[transfer learning](https://en.wikipedia.org/wiki/Transfer_learning) approach loading the [ImageNet](https://en.wikipedia.org/wiki/ImageNet) weights for VGG-16 before starting the training on our images.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kZUONbaleFah",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "target_shape = (64, 64)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qnNYMcZseQKa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def build_cnn():\n",
        "\n",
        "  \"\"\" \n",
        "      Build the convolutive branch of the joint neural network stacking VGG-16 \n",
        "      with two fully connected layers.\n",
        "\n",
        "      Parameters:\t\n",
        "      ----------\n",
        "      ----------\n",
        "\n",
        "      Returns:\n",
        "      ----------\n",
        "      \ttf.keras.Model : A structure that groups layers into an object with \n",
        "                         training and inference features.\n",
        "      ----------\n",
        "  \"\"\"\n",
        "\n",
        "  base_model = Sequential()\n",
        "  base_model.add(Conv2D(input_shape=target_shape+(3,), filters=64, kernel_size=(3,3) ,padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=64, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "  base_model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "  base_model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "  base_model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "\n",
        "  # Load pretrained weights from imagenet -- other inits perform poorly\n",
        "  base_model.load_weights(r\"./NN/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\")\n",
        "\n",
        "  #since the pretrained weights are only for the convolutional block, we have to stack a fully connected one \n",
        "  model_top = Sequential()\n",
        "  model_top.add(GlobalAveragePooling2D(input_shape=base_model.output_shape[1:], data_format=None)),\n",
        "  model_top.add(Dense(256, activation='relu'))\n",
        "  model_top.add(Dropout(0.2))\n",
        "  model_top.add(Dense(256, activation='relu'))\n",
        "  model_top.add(Dropout(0.2))\n",
        "\n",
        "  return Model(inputs=base_model.input, outputs=model_top(base_model.output))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TvdtstHefB4O",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cnn = build_cnn()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qZUqLzLleuuJ",
        "colab_type": "text"
      },
      "source": [
        "Our multi-layer perceptron branch is based on manual hyperparameter tuning. We landed with only two fully connected layes with 32 neurons per layer "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rQSKTnNqet1F",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def build_fnn():\n",
        "  fnn = Sequential()\n",
        "  fnn.add(Dense(32, input_shape=(X_train.shape[1],), activation='relu', kernel_regularizer=l1_l2(0.001, 0.003)))\n",
        "  fnn.add(Dropout(0.1))\n",
        "  fnn.add(Dense(32, activation='relu', kernel_regularizer=l1_l2(0.001, 0.003)))\n",
        "  fnn.add(Dropout(0.1))\n",
        "  return fnn"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MUL1vpp_rlFK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "fnn = build_fnn()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pm4WYfGHrmDS",
        "colab_type": "text"
      },
      "source": [
        "Finally we concatenate the two branches with the [concatenate](https://www.tensorflow.org/api_docs/python/tf/keras/layers/concatenate) method: It takes as input a list of tensors, all of the same shape except for the concatenation axis, and returns a single tensor, the concatenation of all inputs. In this way, we can merge the neural networks into a single one which accepts images and raw data as input. Our claim is that the joint model outperforms the single ones."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W6VJNTICrlbq",
        "colab_type": "code",
        "outputId": "b66f98d8-3995-4f84-ace7-6e8512431a4b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "combinedInput = concatenate([fnn.output, cnn.output])\n",
        "\n",
        "x = Dense(128, activation=\"relu\", kernel_regularizer=l1_l2(0.003, 0.003))(combinedInput)\n",
        "x = Dropout(0.3)(x)\n",
        "x = Dense(2, activation=\"softmax\")(x)\n",
        "\n",
        "# The final model accepts numerical data on the MLP input and images on the CNN input, outputting a single value\n",
        "model = Model(inputs=[fnn.input, cnn.input], outputs=x)\n",
        "model.summary()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_1\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "conv2d_input (InputLayer)       [(None, 64, 64, 3)]  0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d (Conv2D)                 (None, 64, 64, 64)   1792        conv2d_input[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_1 (Conv2D)               (None, 64, 64, 64)   36928       conv2d[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D)    (None, 32, 32, 64)   0           conv2d_1[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_2 (Conv2D)               (None, 32, 32, 128)  73856       max_pooling2d[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_3 (Conv2D)               (None, 32, 32, 128)  147584      conv2d_2[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2D)  (None, 16, 16, 128)  0           conv2d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_4 (Conv2D)               (None, 16, 16, 256)  295168      max_pooling2d_1[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_5 (Conv2D)               (None, 16, 16, 256)  590080      conv2d_4[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_6 (Conv2D)               (None, 16, 16, 256)  590080      conv2d_5[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2D)  (None, 8, 8, 256)    0           conv2d_6[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_7 (Conv2D)               (None, 8, 8, 512)    1180160     max_pooling2d_2[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_8 (Conv2D)               (None, 8, 8, 512)    2359808     conv2d_7[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_9 (Conv2D)               (None, 8, 8, 512)    2359808     conv2d_8[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2D)  (None, 4, 4, 512)    0           conv2d_9[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_2_input (InputLayer)      [(None, 35)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_10 (Conv2D)              (None, 4, 4, 512)    2359808     max_pooling2d_3[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "dense_2 (Dense)                 (None, 32)           1152        dense_2_input[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_11 (Conv2D)              (None, 4, 4, 512)    2359808     conv2d_10[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "dropout_2 (Dropout)             (None, 32)           0           dense_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "conv2d_12 (Conv2D)              (None, 4, 4, 512)    2359808     conv2d_11[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 32)           1056        dropout_2[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2D)  (None, 2, 2, 512)    0           conv2d_12[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "dropout_3 (Dropout)             (None, 32)           0           dense_3[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "sequential_1 (Sequential)       (None, 256)          197120      max_pooling2d_4[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "concatenate (Concatenate)       (None, 288)          0           dropout_3[0][0]                  \n",
            "                                                                 sequential_1[1][0]               \n",
            "__________________________________________________________________________________________________\n",
            "dense_4 (Dense)                 (None, 128)          36992       concatenate[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "dropout_4 (Dropout)             (None, 128)          0           dense_4[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dense_5 (Dense)                 (None, 2)            258         dropout_4[0][0]                  \n",
            "==================================================================================================\n",
            "Total params: 14,951,266\n",
            "Trainable params: 14,951,266\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jVkNE8_HuFMD",
        "colab_type": "text"
      },
      "source": [
        "### -- ***Training and Test***\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hV1GGhJkq4-O",
        "colab_type": "text"
      },
      "source": [
        "Shuffle the training set maintaing the alignment between images and raw data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nzTHxHGnq5JD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "indeces = np.arange(0, train_images.shape[0]-1,1)\n",
        "np.random.shuffle(indeces)\n",
        "\n",
        "train_images = train_images[indeces]\n",
        "X_train = X_train[indeces]\n",
        "\n",
        "y_train = y_train[indeces]\n",
        "y_train_img = y_train_img[indeces]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "guLoOIVArB0T",
        "colab_type": "text"
      },
      "source": [
        "Build tensor slices with tensorflow built-int function, we've chosen a batch size of 32 samples."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IDao2h2Cq17u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_ds = tf.data.Dataset.from_tensor_slices(\n",
        "    (X_train, train_images, y_train)).shuffle(10000).batch(32) #\n",
        "\n",
        "test_ds = tf.data.Dataset.from_tensor_slices((X_valid, valid_images, y_valid)).batch(32)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8isOdmq__jwV",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Loss, Accuracy and Training Functions (using TF built-in optimization utilities)***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5yf-vDkE08QE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def clip_loss_bin(labels, predictions):\n",
        "  \"\"\" \n",
        "    Function to compute the Binary Cross-Entropy Loss. Optimizing from scratch requires avoiding numerical problems,\n",
        "    so it's important to clip the current prediction to compute the loss to not have log(0) terms.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    labels - the labels of the batch in one-hot encoded vector of size B x 2.\n",
        "    predictions - the model estimates using the batch as input. one-hot encoded vector of size B x 2.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tBinary Cross-Entropy computed on the current batch.\n",
        "\n",
        "    ----------\n",
        "  \"\"\"\n",
        "\n",
        "  epsilon = 1e-9\n",
        "  logits = clip(predictions, epsilon, 1. - epsilon)\n",
        "  return  -tf.reduce_sum(labels*tf.math.log(logits)+(1-labels)*tf.math.log(1-logits))\n",
        "\n",
        "\n",
        "def smooth_plot(x, y=None, label='', halflife=10):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to plot smoothed x VS y graphs.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    x - x-axis data.\n",
        "    y - y-axis data.\n",
        "    label - Legend for the current graph.\n",
        "    halflife - Smoothing level.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Yields:\tx VS y graphs.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    if y is None:\n",
        "      y_int = x\n",
        "    else:\n",
        "      y_int = y\n",
        "    x_ewm = pd.Series(y_int).ewm(halflife=halflife)\n",
        "    color = next(plt.gca()._get_lines.prop_cycler)['color']\n",
        "    if y is None:\n",
        "      plt.plot(x_ewm.mean(), label=label, color=color)\n",
        "      plt.fill_between(np.arange(x_ewm.mean().shape[0]), x_ewm.mean() + x_ewm.std(), x_ewm.mean() - x_ewm.std(), color=color, alpha=0.3)\n",
        "    else:\n",
        "      plt.plot(x, x_ewm.mean(), label=label, color=color)\n",
        "      plt.fill_between(x, y_int + x_ewm.std(), y_int - x_ewm.std(), color=color, alpha=0.3)\n",
        "\n",
        "\n",
        "def train(model, train_ds, test_ds, opt, EPOCHS=10):\n",
        "  \"\"\" \n",
        "    Compute the whole training of the neural network for an already defined optimizer in tensorflow. \n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    model    - tf.keras.Model the model on which the training has to be performed\n",
        "    train_ds - The training set as tensor slices, easy to pick the batches. Is an intance of tf.data.Dataset\n",
        "    test_ds  - The test set as tensor slices, easy to pick the batches. Is an intance of tf.data.Dataset\n",
        "    opt      - The optimization algorithm. Can be any insance of tf.keras.optimizers\n",
        "    EPOCHS   - The number of epochs you want train the neural network. \n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\n",
        "    ----------\n",
        "      A tuple containing the relevant metrics according to the training\n",
        "    ----------\n",
        "  \"\"\"\n",
        "\n",
        "  train_loss, test_loss, train_acc, test_acc = [], [] ,[], [] #Resulting metrics\n",
        "\n",
        "  loss_object = tf.keras.losses.BinaryCrossentropy() #Binary crossentropy as loss function\n",
        "\n",
        "  optimizer = opt #the instance of the optimizer is passed as formal parameter \n",
        "\n",
        "  train_accuracy = tf.keras.metrics.BinaryAccuracy(name='train_accuracy')\n",
        "  test_accuracy = tf.keras.metrics.BinaryAccuracy(name='test_accuracy')\n",
        "\n",
        "\n",
        "  for epoch in range(EPOCHS):\n",
        "      batch_loss, batch_acc = [], []\n",
        "      for data, images, labels in train_ds: \n",
        "          with tf.GradientTape() as tape:\n",
        "                predictions = model([data, images]) #get the prediction for the current batch\n",
        "                loss = loss_object(labels, predictions) #evaluate the loss\n",
        "          gradients = tape.gradient(loss, model.trainable_variables) #compute the gradient of the loss function w.r.t. the current weigths of the NN\n",
        "          optimizer.apply_gradients(zip(gradients, model.trainable_variables)) #run an optimization step\n",
        "\n",
        "          #append the loss and the accuracy for the current batch \n",
        "          batch_loss.append(loss.numpy())\n",
        "          batch_acc.append(train_accuracy(labels, predictions).numpy())\n",
        "\n",
        "      train_loss.append(np.mean(batch_loss)) #evaluate the epoch loss as mean of the batch losses\n",
        "      train_acc.append(np.mean(batch_acc))  #evaluate the epoch accuracy as mean of the batch accuracy\n",
        "\n",
        "      \n",
        "      batch_loss, batch_acc = [], []\n",
        "      for test_data, test_images, test_labels in test_ds: #quite the same as the training step but now loss & accuracy are computed on a completely unseen batch\n",
        "          predictions = model([test_data, test_images])\n",
        "          t_loss = loss_object(test_labels, predictions)\n",
        "          batch_loss.append(t_loss.numpy())\n",
        "          batch_acc.append(test_accuracy(test_labels, predictions).numpy())\n",
        "\n",
        "      test_loss.append(np.mean(batch_loss))\n",
        "      test_acc.append(np.mean(batch_acc))\n",
        "      template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n",
        "      print(template.format(epoch+1,\n",
        "                            train_loss[epoch],\n",
        "                            train_acc[epoch]*100,\n",
        "                            test_loss[epoch],\n",
        "                            test_acc[epoch]*100))\n",
        "\n",
        "  return train_loss, test_loss, train_acc, test_acc\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def train_SCA(model, train_ds, test_ds, EPOCHS=10):\n",
        "  \"\"\"\n",
        "    Same function as train(...) defined above \n",
        "    but the optimization algorithm is the Linearinzed-SCA\n",
        "  \"\"\"\n",
        "  train_loss, test_loss, train_acc, test_acc = [], [] ,[], []\n",
        "\n",
        "  loss_object = tf.keras.losses.BinaryCrossentropy()\n",
        "\n",
        "  train_accuracy = tf.keras.metrics.BinaryAccuracy(name='train_accuracy')\n",
        "  test_accuracy = tf.keras.metrics.BinaryAccuracy(name='test_accuracy')\n",
        "\n",
        "  rho = 0.3 #rho is in [0,1] as far as you approach one, you get closer and closer to the SGD algorithm\n",
        "  lam = 1e-1 #penalization factor\n",
        "  step = 0.1e-3 #step size\n",
        "\n",
        "  layers = model.trainable_variables #pick the weigths of the nerual network\n",
        "  d = np.array([np.zeros(shape=(layer.shape)).astype(np.float32) for layer in layers]) #initialize the vector d as the zero vector for maintain independence with the data\n",
        "  for epoch in range(EPOCHS):\n",
        "    # Reset the batch metrics at the start of the next epoch\n",
        "      batch_loss, batch_acc = [], []\n",
        "      for data, images, labels in train_ds:\n",
        "          with tf.GradientTape() as tape:\n",
        "            predictions = model([data, images])\n",
        "            loss = loss_object(labels, predictions)\n",
        "\n",
        "          gradients = tape.gradient(loss, model.trainable_variables) #compute the gradient\n",
        "          gradients = np.array([grad.numpy() for grad in gradients]) #convert the tensors into numpy array\n",
        "\n",
        "          w =  np.array([layer.numpy() for layer in model.trainable_variables]) #weights of the nerual network as numpy array \n",
        "          w_hat = (-1.0/lam)*(rho*gradients + (1-rho)*d) #compute the convex combination between the gradient and the d vector \n",
        "\n",
        "          w = w + step*(w_hat - w) #compute a descent step\n",
        "          d = rho*gradients + (1-rho)*d #update the d vector as convex combination between the gradient and the actual d vector \n",
        "\n",
        "          model.set_weights(w.tolist()) #set the updated weights of the neural network\n",
        "\n",
        "          batch_loss.append(loss.numpy())\n",
        "          batch_acc.append(train_accuracy(labels, predictions).numpy())\n",
        "\n",
        "      train_loss.append(np.mean(batch_loss))\n",
        "      train_acc.append(np.mean(batch_acc))\n",
        "\n",
        "      \n",
        "      batch_loss, batch_acc = [], []\n",
        "      for test_data, test_images, test_labels in test_ds:\n",
        "          predictions = model([test_data, test_images])\n",
        "          t_loss = loss_object(test_labels, predictions)\n",
        "          batch_loss.append(t_loss.numpy())\n",
        "          batch_acc.append(test_accuracy(test_labels, predictions).numpy())\n",
        "\n",
        "      test_loss.append(np.mean(batch_loss))\n",
        "      test_acc.append(np.mean(batch_acc))\n",
        "      template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n",
        "      print(template.format(epoch+1,\n",
        "                            train_loss[epoch],\n",
        "                            train_acc[epoch]*100,\n",
        "                            test_loss[epoch],\n",
        "                            test_acc[epoch]*100))\n",
        "\n",
        "  return train_loss, test_loss, train_acc, test_acc"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8TP1ruavsCIg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def get_metrics(algorithm=''):\n",
        "  \"\"\" \n",
        "    Compute the metrics (loss & accuracy) for the train and the test set using the algorithm implemented from scratch passed by parameter as string.\n",
        "    If exist a file called algo.json into the 'NN' directory where algo is the name of the chosen algorithm; the file will be loaded as result of this function.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "    algorithm    - string:  the algorithm which will be used for the optimization of the loss function. It must be one of the following: ['sgd', 'adam', 'sca'].\n",
        "    ----------\n",
        "\n",
        "    Returns:\n",
        "    ----------\n",
        "      A dicitonary containing the following metrics: [loss, accuracy, val_loss, val_accuracy]\n",
        "    ----------\n",
        "  \"\"\"\n",
        "  algorithm = algorithm.lower() #better handle erros, if you use the upper-case it will not throw an error\n",
        "  if algorithm == '' or algorithm not in ['sgd', 'adam', 'sca']: #check if the requested algorithm is in the list of available algorithms \n",
        "    print(\"You must choose an algorithm from the following: ['sgd', 'adam', 'sca']\")\n",
        "  else:\n",
        "    metrics_filepath = './NN/' + algorithm + '.json' #build the filepath of the results based on the algorithm requested. It will be placed under the NN directory.\n",
        "    if not exists(metrics_filepath): #if the file with the results doesn't already exist, you will run the training phase with the chosen algorithm for 100 epochs and save it after.\n",
        "      results = []\n",
        "      if algorithm == 'sgd':\n",
        "        results = train(model, train_ds, test_ds, opt=tf.keras.optimizers.SGD(lr=0.0001,decay=0.0001, momentum=0.9, nesterov=True), EPOCHS=100)\n",
        "      elif algorithm == 'adam':\n",
        "        results = train(model, train_ds, test_ds, opt=tf.keras.optimizers.Adam(lr=0.000075), EPOCHS=100)\n",
        "      elif algorithm == 'sca':\n",
        "        results = train_SCA(model, train_ds, test_ds, EPOCHS=100)\n",
        "\n",
        "      metrics = dict()\n",
        "      metrics['loss'] = results[0]\n",
        "      metrics['val_loss'] = results[1]\n",
        "      metrics['accuracy'] = results[2]\n",
        "      metrics['val_accuracy'] = results[3]\n",
        "      metrics = {key : [str(value) for value in values] for key, values in metrics.items() } #floats cannot be saved as json file, so we have to first convert them into strings.\n",
        "      with open(metrics_filepath, 'w') as outfile:\n",
        "        json.dump(metrics, outfile,indent=2)\n",
        "    else: #in the case you have a file with the results for the chosen algorithm inside the NN directory, it will be loaded without performing the entire training phase. \n",
        "     with open(metrics_filepath) as f:\n",
        "       metrics = json.load(f)\n",
        "  return metrics\n",
        "   "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t1PH0sS-_kCV",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***SGD***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BeWd7-FmphSn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sgd = get_metrics('sgd')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B42nXZnV_kJP",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Adam*** \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NiUuvI_eqaQR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "adm = get_metrics('adam')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6fGy1A-m-9BX",
        "colab_type": "text"
      },
      "source": [
        "##### Comparing SGD to ADAM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M3QAxOz5_A7F",
        "colab_type": "code",
        "outputId": "30bcc811-1529-48c4-f4c9-d8d49c5884a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "smooth_plot(sgd['loss'], label='SGD')\n",
        "smooth_plot(adm['loss'], label='Adam')\n",
        "plt.title(\"Train Loss\")\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb3cbfddf60>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_sD8P1R3q3qt",
        "colab_type": "code",
        "outputId": "a0d5249b-2bb8-48da-f2f6-e43762c91d8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "smooth_plot(sgd['accuracy'], label='SGD')\n",
        "smooth_plot(adm['accuracy'], label='Adam')\n",
        "plt.title(\"Train accuracy\")\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb3cbc60be0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SXsD7zL8_kVZ",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***SCA***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jJ4RlhV58QHI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sca = get_metrics('sca')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cqe7tit8gXzd",
        "colab_type": "code",
        "outputId": "95b30d84-998a-42f2-fc88-c981e2080e57",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "# Train Losses \n",
        "\n",
        "smooth_plot(sgd['loss'], label='SGD')\n",
        "smooth_plot(adm['loss'], label='Adam')\n",
        "smooth_plot(sca['loss'], label='Sca')\n",
        "plt.title(\"Train Loss\")\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb3cbc2fa58>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nYRhGyfl/gp7ByS3UJ9cAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXaefMj_gB95",
        "colab_type": "code",
        "outputId": "436f0daa-60ae-42f3-cd66-fe74638ada77",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "# Train Accuracy\n",
        "\n",
        "smooth_plot(sgd['accuracy'], label='SGD')\n",
        "smooth_plot(adm['accuracy'], label='Adam')\n",
        "smooth_plot(sca['accuracy'], label='Sca')\n",
        "plt.title(\"Train Accuracy\")\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb3c56d1cc0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HcFkrpSIgTen",
        "colab_type": "code",
        "outputId": "4b5cd2e8-5505-43ee-c135-329b69e321d0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "# Test Accuracy\n",
        "\n",
        "smooth_plot(sgd['val_accuracy'], label='SGD')\n",
        "smooth_plot(adm['val_accuracy'], label='Adam')\n",
        "smooth_plot(sca['val_accuracy'], label='Sca')\n",
        "plt.title(\"Test Accuracy\")\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb3c5693048>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n4v8DNRwWxgFqCc8AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N4rG8k3VT3Jn",
        "colab_type": "text"
      },
      "source": [
        "From the results, it is clear that SCA only partially outperforms Adam and SGD. We can expect it reaches similiar (but better) results due to the fact that we are using the simplest surrogate function and this translates in an hybrid algorithm very close to a more robust variant of SGD and a simpler variant of Adam. The interesting fact is that we reached the best SCA performances imposing costant stepsizes and so being theoretically wrong.\n",
        "\n",
        "This phenomenon has been observed in the last period, and some very recent works propose convergences proofs with costant stepsizes.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "reDxpOVYpkm8",
        "colab_type": "text"
      },
      "source": [
        "### - ***External Libraries for Jax implementation***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F-INrE6epedk",
        "colab_type": "code",
        "outputId": "e50fb6ba-5662-4ef9-e3e3-50d10fa6a245",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "import jax.numpy as np\n",
        "import h5py\n",
        "from jax import random\n",
        "from jax import jit, grad, value_and_grad, partial, vmap\n",
        "from jax.flatten_util import ravel_pytree\n",
        "from jax.experimental import stax\n",
        "from jax.experimental.stax import Sigmoid,Dense, Relu, Softmax, Tanh, Conv, GeneralConv, BatchNorm, MaxPool, FanOut, FanInSum, Identity, AvgPool, Flatten, LogSoftmax, AvgPool, Dropout\n",
        "from jax.experimental import optimizers\n",
        "from jax.experimental.optimizers import l2_norm, tree_flatten\n",
        "import jax\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets, preprocessing, model_selection\n",
        "import pandas as pd\n",
        "from tqdm.autonotebook import trange\n",
        "import numpy as onp\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib\n",
        "from pylab import rcParams\n",
        "#import brewer2mpl\n",
        "import networkx as nx\n",
        "import numpy as onp\n",
        "\n",
        "#tf.__version__"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/tqdm/autonotebook/__init__.py:14: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n",
            "  \" (e.g. in jupyter console)\", TqdmExperimentalWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yeSgEmZozVz8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Explicitly Loading ImageNet Weights as Initialization\n",
        "\n",
        "imagenet_weights = h5py.File('./NN/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', 'r')\n",
        "W = []\n",
        "b = []\n",
        "\n",
        "W.append(imagenet_weights['block1_conv1']['block1_conv1_W_1:0'].value)\n",
        "W.append(imagenet_weights['block1_conv2']['block1_conv2_W_1:0'].value)\n",
        "\n",
        "W.append(imagenet_weights['block2_conv1']['block2_conv1_W_1:0'].value)\n",
        "W.append(imagenet_weights['block2_conv2']['block2_conv2_W_1:0'].value)\n",
        "\n",
        "W.append(imagenet_weights['block3_conv1']['block3_conv1_W_1:0'].value)\n",
        "W.append(imagenet_weights['block3_conv2']['block3_conv2_W_1:0'].value)\n",
        "W.append(imagenet_weights['block3_conv3']['block3_conv3_W_1:0'].value)\n",
        "\n",
        "W.append(imagenet_weights['block4_conv1']['block4_conv1_W_1:0'].value)\n",
        "W.append(imagenet_weights['block4_conv2']['block4_conv2_W_1:0'].value)\n",
        "W.append(imagenet_weights['block4_conv3']['block4_conv3_W_1:0'].value)\n",
        "\n",
        "W.append(imagenet_weights['block5_conv1']['block5_conv1_W_1:0'].value)\n",
        "W.append(imagenet_weights['block5_conv2']['block5_conv2_W_1:0'].value)\n",
        "W.append(imagenet_weights['block5_conv3']['block5_conv3_W_1:0'].value)\n",
        "\n",
        "\n",
        "b.append(imagenet_weights['block1_conv1']['block1_conv1_b_1:0'].value)\n",
        "b.append(imagenet_weights['block1_conv2']['block1_conv2_b_1:0'].value)\n",
        "\n",
        "b.append(imagenet_weights['block2_conv1']['block2_conv1_b_1:0'].value)\n",
        "b.append(imagenet_weights['block2_conv2']['block2_conv2_b_1:0'].value)\n",
        "\n",
        "b.append(imagenet_weights['block3_conv1']['block3_conv1_b_1:0'].value)\n",
        "b.append(imagenet_weights['block3_conv2']['block3_conv2_b_1:0'].value)\n",
        "b.append(imagenet_weights['block3_conv3']['block3_conv3_b_1:0'].value)\n",
        "\n",
        "b.append(imagenet_weights['block4_conv1']['block4_conv1_b_1:0'].value)\n",
        "b.append(imagenet_weights['block4_conv2']['block4_conv2_b_1:0'].value)\n",
        "b.append(imagenet_weights['block4_conv3']['block4_conv3_b_1:0'].value)\n",
        "\n",
        "b.append(imagenet_weights['block5_conv1']['block5_conv1_b_1:0'].value)\n",
        "b.append(imagenet_weights['block5_conv2']['block5_conv2_b_1:0'].value)\n",
        "b.append(imagenet_weights['block5_conv3']['block5_conv3_b_1:0'].value)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nviMadp7ue9j",
        "colab_type": "text"
      },
      "source": [
        "### -- **Main Architecture in JAX** \n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wTI6I_L8XFyS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\"\"\"\n",
        "JAX is a functional programming language, so the model building phase and net initialization is made by passing \n",
        "the net layers the user wants (they're in a functional form too, but with a usage similiar to TF) as parameters to the function \"stax.serial()\"\n",
        "\n",
        "jax.experimental.stax.parallel(*layers)\n",
        "Combinator for composing layers in parallel.\n",
        "\n",
        "\n",
        "Parameters:\t\n",
        "----------\n",
        "\n",
        "*layers – a sequence of layers, each an (init_fun, apply_fun) pair.\n",
        "\n",
        "----------\n",
        "\n",
        "Returns:\tA new layer, meaning an (init_fun, apply_fun) pair, representing the serial composition of the given sequence of layers.\n",
        "\n",
        "----------\n",
        "\"\"\"\n",
        "\n",
        "\n",
        "num_classes = 2\n",
        "net_init, net_apply = stax.serial(\n",
        "      Conv(64, (3, 3), padding='same', W_init=lambda x,y: W[0], b_init=lambda x,y: b[0]), Relu,\n",
        "      Conv(64, (3, 3), padding='same', W_init=lambda x,y: W[1], b_init=lambda x,y: b[1]), Relu,\n",
        "      MaxPool((2,2), strides=(2,2)),\n",
        "\n",
        "      Conv(128, (3, 3), padding='same', W_init=lambda x,y: W[2], b_init=lambda x,y: b[2]), Relu,\n",
        "      Conv(128, (3, 3), padding='same', W_init=lambda x,y: W[3], b_init=lambda x,y: b[3]), Relu,\n",
        "      MaxPool((2,2), strides=(2,2)),\n",
        "\n",
        "      Conv(256, (3, 3), padding='same', W_init=lambda x,y: W[4], b_init=lambda x,y: b[4]), Relu,\n",
        "      Conv(256, (3, 3), padding='same', W_init=lambda x,y: W[5], b_init=lambda x,y: b[5]), Relu,\n",
        "      Conv(256, (3, 3), padding='same', W_init=lambda x,y: W[6], b_init=lambda x,y: b[6]), Relu,\n",
        "      MaxPool((2,2), strides=(2,2)),\n",
        "\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[7], b_init=lambda x,y: b[7]), Relu,\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[8], b_init=lambda x,y: b[8]), Relu,\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[9], b_init=lambda x,y: b[9]), Relu,\n",
        "      MaxPool((2,2), strides=(2,2)),\n",
        "\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[10], b_init=lambda x,y: b[10]), Relu,\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[11], b_init=lambda x,y: b[11]), Relu,\n",
        "      Conv(512, (3, 3), padding='same', W_init=lambda x,y: W[12], b_init=lambda x,y: b[12]), Relu,\n",
        "      MaxPool((2,2), strides=(2,2)),\n",
        "\n",
        "      Flatten, \n",
        "      Dense(256), \n",
        "      Dropout(0.2),\n",
        "      Dense(256), \n",
        "      Dropout(0.2),\n",
        "      Dense(num_classes),\n",
        "      Softmax\n",
        "      )\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TcdB1oSDZzm-",
        "colab_type": "code",
        "outputId": "4545e8cb-d73d-4e20-dddc-461683ea466a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "rng = random.PRNGKey(0)  # PseudoRandomNumberGenerator Seed, for reproducibility and initialization\n",
        "\n",
        "in_shape = (-1,)  + target_shape + (3,) # Input (Data) shape, -1 as first argument to automatically specify batches or dataset lengths; \n",
        "\n",
        "net_params_example = net_init(rng, in_shape)[1] # An usage example of the net_init() function for extracting w_0\n",
        "\n",
        "n_params = ravel_pytree(net_params_example)[0].shape[0] # This function vectorizes structured and complex data types \n",
        "                                                        # like net parameters and can return, as second argument,\n",
        "                                                        # a function to un-vectorize them.\n",
        "                                                        \n",
        "print('The network has ', n_params, ' parameters.')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The network has  15305538  parameters.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cGQWa0TLc0z7",
        "colab_type": "text"
      },
      "source": [
        "-- ***Loss, Accuracy and Training Functions (using JAX built-in optimization utilities)***\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zC8Vu5kLyYBl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def loss(params, xb, yb):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to compute the Categorical Cross-Entropy Loss.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - the current estimate of net weights.\n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tCategorical Cross-Entropy computed on the current batch and net parameters.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "    epsilon = 1e-9 # Clipping threshold \n",
        "    logits = net_apply(params, xb, rng=random.PRNGKey(0)) \n",
        "    logits = np.clip(logits, epsilon, 1. - epsilon)\n",
        "    return -np.sum(np.log(logits)*yb)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bBqYQ-PqIGnm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "  def accuracy(params, xb,yb):\n",
        "\n",
        "    \"\"\" \n",
        "    Trivial function to compute the (stochastic) accuracy of the model.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - the current estimate of net weights.\n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tThe model accuracy on the current batch and net parameters.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    pred_class = np.argmax(net_apply(params,xb, rng=random.PRNGKey(0)), axis = -1)\n",
        "    target_class = np.argmax(yb, axis=-1)\n",
        "    return np.mean(pred_class == target_class)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8bvMOTTHytWo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def reg_loss(params, xb, yb, C=1e-1):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to compute the l2-penalized Loss (which Loss Function depends on the definition of the previous function loss()).\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - the current estimate of net weights.\n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "    C - penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tl2-penalized loss on the current batch and net parameters.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    err = loss(params, xb, yb)\n",
        "    reg = C * sum(np.vdot(x, x) for x in tree_flatten(params)[0])\n",
        "    return err + reg, (err, reg)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ugbO4PTsyuz9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@partial(jit, static_argnums=(2,3,))\n",
        "def step(i, opt_state, opt_update, opt_params, xb, yb, C=0.0):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to define a compiled update step\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    i - Current iteration\n",
        "    opt_state - A pytree representing the optimizer state to be updated.\n",
        "    opt_update - Function that updates the optmizer state.\n",
        "                        Paramters:\n",
        "                        ----------\n",
        "\n",
        "                        i - Current iteration.\n",
        "                        g - Current gradient.\n",
        "                        opt_state - A pytree representing the optimizer state to be updated.  \n",
        "\n",
        "                        ----------\n",
        "\n",
        "                        Returns: A pytree representing the updated optimizer state.\n",
        "\n",
        "                        ----------                \n",
        "    opt_params - Function to update net weigths.\n",
        "                        Paramters:\n",
        "                        ----------\n",
        "\n",
        "                        opt_state - A pytree representing the optimizer state to be updated.  \n",
        "\n",
        "                        ----------\n",
        "\n",
        "                        Returns: Updated net weights.\n",
        "\n",
        "                        ----------       \n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "    C - penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tCurrent Loss and updated optimizer state.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    params = opt_params(opt_state)\n",
        "    l, g = value_and_grad(reg_loss, has_aux=True)(params, xb, yb, C=C)\n",
        "    return l, opt_update(i, g, opt_state)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gzMBhv8ZyxkE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def standard_optimization(model_init, opt_init, opt_update, opt_get_params, max_iters=2000, C=1e-1):\n",
        "\n",
        "    \"\"\" \n",
        "    Main function to define the optimization procedure.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    model_init - Net initialization function, returns initialized weights and output shapes.\n",
        "    opt_init - A pytree representing the initialized optimizer state. \n",
        "    opt_update - Function that updates the optimizer state.\n",
        "                        Paramters:\n",
        "                        ----------\n",
        "\n",
        "                        i - Current iteration.\n",
        "                        g - Current gradient.\n",
        "                        opt_state - A pytree representing the optimizer state to be updated.  \n",
        "\n",
        "                        ----------\n",
        "\n",
        "                        Returns: A pytree representing the updated optimizer state.\n",
        "\n",
        "                        ----------                \n",
        "    opt_get_params - Function to update net weigths.\n",
        "                        Paramters:\n",
        "                        ----------\n",
        "\n",
        "                        opt_state - A pytree representing the optimizer state to be updated.  \n",
        "\n",
        "                        ----------\n",
        "\n",
        "                        Returns: Updated net weights.\n",
        "\n",
        "                        ----------       \n",
        "    max_iters - Maximum number of optimization steps.\n",
        "    C - Penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tLoss history on both (stochastic, on batch) training and test sets and accuracy history.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"  \n",
        "\n",
        "    out_shape, net_params = model_init()\n",
        "\n",
        "    # Histories initialization\n",
        "    loss_history_stochastic = []\n",
        "    loss_test_history_stochastic = []\n",
        "    accuracy_test_history = []\n",
        "    opt_state = opt_init(net_params)\n",
        "\n",
        "    for i in trange(max_iters):\n",
        "      loss_test_history_stochastic.append(loss(net_params, test_X, test_Y_one_hot))\n",
        "      accuracy_test_history.append(accuracy(net_params, test_X, test_Y_one_hot))\n",
        "      xb, yb = next(train_loader) # Batch loading\n",
        "      l, opt_state = step(i, opt_state, opt_update, opt_get_params, xb.numpy(), yb.numpy(), C=C) # Optimization step\n",
        "      loss_history_stochastic.append(l[0])\n",
        "      net_params = opt_get_params(opt_state) # Parameters updating\n",
        "\n",
        "    return loss_history_stochastic,loss_test_history_stochastic, accuracy_test_history"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rG4-73yn5QH-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Algorithms parameters\n",
        "\n",
        "batch_size = 32 # Batch size\n",
        "\n",
        "C = 1e-1 # Penalty weight\n",
        "\n",
        "step_size_sgd = 0.0001# SGD Step size \n",
        "\n",
        "step_size_adam = 0.0001 # Adam Step size \n",
        "\n",
        "max_iters = 500# Number of Optimization steps\n",
        "\n",
        "train_X, train_Y_one_hot = train_images, y_train_img\n",
        "test_X, test_Y_one_hot = valid_images, y_valid_img\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V_h_02zEusPu",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***SGD***\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-hUJjeM6G7u_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initialize dataset\n",
        "train_loader = iter(tf.data.Dataset.from_tensor_slices((train_X, train_Y_one_hot)).shuffle(500).repeat().batch(batch_size))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E3u75Y03sZCY",
        "colab_type": "code",
        "outputId": "bd2926c2-f1e3-47e4-e93c-0a76b2e9ab4c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 361
        }
      },
      "source": [
        "# Optimize parameters in a loop \n",
        "rng = random.PRNGKey(0)\n",
        "opt_sgd_init, opt_sgd_update, opt_sgd_params = optimizers.sgd(step_size=step_size_sgd) # Initializations of all the optimization parameters descripted\n",
        "                                                                                       # in the previous functions.\n",
        "loss_history_stochastic_sgd, test_loss_history_stochastic_sgd, accuracy_test_history_sgd= \\\n",
        "                                standard_optimization(lambda: net_init(rng,in_shape), opt_sgd_init, opt_sgd_update, opt_sgd_params, max_iters=max_iters)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-dcd66899bcff>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mopt_sgd_init\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt_sgd_update\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt_sgd_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msgd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstep_size_sgd\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Initializations of all the optimization parameters descripted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m                                                                                        \u001b[0;31m# in the previous functions.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mloss_history_stochastic_sgd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_loss_history_stochastic_sgd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy_test_history_sgd\u001b[0m\u001b[0;34m=\u001b[0m                                 \u001b[0mstandard_optimization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnet_init\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrng\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0min_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt_sgd_init\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt_sgd_update\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt_sgd_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_iters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-39-f7e477fbb2f0>\u001b[0m in \u001b[0;36mstandard_optimization\u001b[0;34m(model_init, opt_init, opt_update, opt_get_params, max_iters, C)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_iters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m       \u001b[0mloss_test_history_stochastic\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnet_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_Y_one_hot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m       \u001b[0maccuracy_test_history\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnet_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_Y_one_hot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m       \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Batch loading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-35-870014485d9e>\u001b[0m in \u001b[0;36mloss\u001b[0;34m(params, xb, yb)\u001b[0m\n\u001b[1;32m     18\u001b[0m     \"\"\"\n\u001b[1;32m     19\u001b[0m     \u001b[0mepsilon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1e-9\u001b[0m \u001b[0;31m# Clipping threshold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mlogits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnet_apply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrng\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPRNGKey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mlogits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepsilon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mepsilon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogits\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0myb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/experimental/stax.py\u001b[0m in \u001b[0;36mapply_fun\u001b[0;34m(params, inputs, **kwargs)\u001b[0m\n\u001b[1;32m    299\u001b[0m     \u001b[0mrngs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrng\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnlayers\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrng\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnlayers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrng\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapply_funs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrngs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 301\u001b[0;31m       \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrng\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrng\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    302\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0minit_fun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapply_fun\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/experimental/stax.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(params, inputs, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m   \u001b[0;34m\"\"\"Layer that applies a scalar function elementwise on its inputs.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m   \u001b[0minit_fun\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mrng\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m   \u001b[0mapply_fun\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfun_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0minit_fun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapply_fun\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m \u001b[0mTanh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0melementwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtanh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/nn/functions.py\u001b[0m in \u001b[0;36mrelu\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;31m\\\u001b[0m\u001b[0mmathrm\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m   \"\"\"\n\u001b[0;32m---> 38\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaximum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msoftplus\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/numpy/lax_numpy.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x1, x2)\u001b[0m\n\u001b[1;32m    403\u001b[0m     \u001b[0mfn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx2\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlax_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0m_promote_args_inexact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 405\u001b[0;31m     \u001b[0mfn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx2\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlax_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0m_promote_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy_fn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    406\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0m_wraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy_fn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    407\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/lax/lax.py\u001b[0m in \u001b[0;36mmax\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m    314\u001b[0m   \u001b[0mFor\u001b[0m \u001b[0mcomplex\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muses\u001b[0m \u001b[0ma\u001b[0m \u001b[0mlexicographic\u001b[0m \u001b[0mcomparison\u001b[0m \u001b[0mon\u001b[0m \u001b[0mthe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m   `(real, imaginary)` pairs.\"\"\"\n\u001b[0;32m--> 316\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mmax_p\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/core.py\u001b[0m in \u001b[0;36mbind\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    157\u001b[0m     \u001b[0mtop_trace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_top_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtop_trace\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m     \u001b[0mtracers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_trace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull_raise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/interpreters/xla.py\u001b[0m in \u001b[0;36mapply_primitive\u001b[0;34m(prim, *args, **params)\u001b[0m\n\u001b[1;32m    161\u001b[0m   \u001b[0;34m\"\"\"Impl rule that compiles and runs a single primitive 'prim' using XLA.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m   \u001b[0mcompiled_fun\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxla_primitive_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 163\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mcompiled_fun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mcache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jax/interpreters/xla.py\u001b[0m in \u001b[0;36m_execute_compiled_primitive\u001b[0;34m(prim, compiled, backend, tuple_args, result_handler, *args)\u001b[0m\n\u001b[1;32m    241\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtuple_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    242\u001b[0m     \u001b[0minput_bufs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mmake_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_bufs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 243\u001b[0;31m   \u001b[0mout_buf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompiled\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mExecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_bufs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    244\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mFLAGS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjax_debug_nans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m     \u001b[0mcheck_nans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_buf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestructure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mprim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmultiple_results\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mout_buf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ByD4TqTCtWK8",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Adam***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7C0KdxiftbNU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Re-Initialize dataset\n",
        "train_loader = iter(tf.data.Dataset.from_tensor_slices((train_X, train_Y_one_hot)).shuffle(500).repeat().batch(batch_size))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DQsklG3FuBN9",
        "colab_type": "code",
        "outputId": "7eeb47e4-5af9-4e66-9e67-02487e4d93ba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "58562cc2a7f64e45a85c7d50221323fb",
            "c05737efe5774ebdbbf7016ba0d2d918",
            "408baeb9b5a84296aeb8808328e74ab3",
            "ec87df54e8544a17b4495c8e609c2ce6",
            "98b645fceb9f4cb3b77cd24ba1938348",
            "a467e0a692614b7f90594d5f16f6c351",
            "57b2e0dd911348678dcaecc3eeae74f3",
            "b2ee398f2d0f4040b02c7552c6c8c27c"
          ]
        }
      },
      "source": [
        "# Optimize parameters in a loop \n",
        "rng = random.PRNGKey(0)\n",
        "opt_adam_init, opt_adam_update, opt_adam_params = optimizers.adam(step_size=step_size_adam) # Initializations of all the optimization parameters descripted\n",
        "                                                                                            # in the previous functions.\n",
        "loss_history_stochastic_adam, test_loss_history_stochastic_adam, accuracy_test_history_adam = \\\n",
        "                                standard_optimization(lambda: net_init(rng, in_shape), opt_adam_init, opt_adam_update, opt_adam_params, max_iters=max_iters)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "58562cc2a7f64e45a85c7d50221323fb",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(IntProgress(value=0, max=500), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1FmDkRbKvTkQ",
        "colab_type": "code",
        "outputId": "38733d5d-9418-438c-a57e-0599ea10ccc7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Train Loss plots\n",
        "\n",
        "smooth_plot(loss_history_stochastic_sgd, label='SGD')\n",
        "smooth_plot(loss_history_stochastic_adam, label='Adam')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f1540103ef0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO29eZwdV3Xv+91VZ+55UqtbLbklax5s\nyZYnMMQYA2aGkIQhMeOLLwnmBkLuZQhhyuM9khvCJeFeLuYRMiITzCxsjME2xniUbFnzPLbUUg/q\nuftMVfv9ser0pD7dLalb3X16fT+f8zl1qnbV2XXU+u1Va6+9lrHWoiiKohQWzkx3QFEURZl6VNwV\nRVEKEBV3RVGUAkTFXVEUpQBRcVcURSlAQjPdAYDq6mrb2Ng4091QFEWZU2zfvr3NWlsz1rFZIe6N\njY1s27ZtpruhKIoypzDGnMh3TN0yiqIoBYiKu6IoSgGi4q4oilKAzAqfu6IoynhkMhmamppIJpMz\n3ZUZIRaL0dDQQDgcnvQ5Ku6Kosx6mpqaKCkpobGxEWPMTHfnimKtpb29naamJpYuXTrp89QtoyjK\nrCeZTFJVVTXvhB3AGENVVdVFP7VMKO7GmJgx5lljzIvGmD3GmM8H+//ZGHPMGLMjeG0M9htjzD8Y\nYw4bY3YaY667pDtSFEUZxnwU9hyXcu+TccukgNuttb3GmDDwhDHmweDYf7PW3j+q/WuBFcHrJuDr\nwbuiKIpyhZjQcrdCb/AxHLzGSwL/ZuBfg/OeBsqNMXWX39X8NHcOcKq9fzq/QlEUhS9+8YusW7eO\na665ho0bN/LMM8+QzWb51Kc+xYoVK9i4cSMbN27ki1/84uA5ruuyceNG1q1bx7XXXsuXv/xlfN+f\n9r5OakLVGOMC24HlwP+y1j5jjPkT4IvGmM8AvwI+Ya1NAYuAU8NObwr2NY+65t3A3QBLliy5pM7v\nP9vND58/TX15nMqiCIurEpd0HUVRlIl46qmn2Lp1K88//zzRaJS2tjbS6TSf/vSnOXv2LLt27SIW\ni9HT08OXv/zlwfPi8Tg7duwAoKWlhXe96110d3fz+c9/flr7O6kJVWutZ63dCDQANxpj1gOfBFYD\nNwCVwMcv5outtfdaazdbazfX1IyZGmFCms4P8I3Hj3Kmc4CMN/0joaIo85fm5maqq6uJRqMAVFdX\nU15ezje/+U3+8R//kVgsBkBJSQmf+9znxrzGggULuPfee/na177GdFfBu6hQSGttpzHmUeBOa+3f\nBbtTxphvA38RfD4NLB52WkOwb8pZtbAEgHPdSRoq4ni+xXXm76SLoswHPv/TPew90z2l11xbX8pn\n37hu3DavfvWr+cIXvsDKlSu54447ePvb305FRQVLliyhpKRk0t+1bNkyPM+jpaWF2tray+16XiYT\nLVNjjCkPtuPAq4D9OT+6kWnctwC7g1N+Arw7iJq5Geiy1jaPcenLZlF5nKKIy7nuFAD96ex0fI2i\nKArFxcVs376de++9l5qaGt7+9rfz2GOPjWjz7W9/m40bN7J48WJOnTo19oWuEJOx3OuAfwn87g7w\nn9barcaYR4wxNYABdgAfDNo/ALwOOAz0A++b+m4LjmNYUVvCue4kYOhLeZTEJr+CS1GUucdEFvZ0\n4rout912G7fddhsbNmzgG9/4BidPnqSnp4eSkhLe97738b73vY/169fjed6Y1zh69Ciu67JgwYJp\n7euE4m6t3QlsGmP/7XnaW+BDl9+1yVFfHuN0xwDGWLoGMiwsi12pr1YUZR5x4MABHMdhxYoVAOzY\nsYNVq1axadMm7rnnHr7xjW8Qi8XwPI90Oj3mNVpbW/ngBz/IPffcM+1x+3M+/UBFIkJfOkss5NLS\nnRz0wyuKokwlvb29fPjDH6azs5NQKMTy5cu59957KSsr46/+6q9Yv349JSUlxONx3vOe91BfXw/A\nwMAAGzduJJPJEAqFuOuuu/jzP//zae/vnBf3yqIIA2mPaNjhXHcSa+28XsmmKMr0cP311/Pkk0+O\neexLX/oSX/rSl8Y8ls89M93M+dwyFYkIFsh6lmTGpy89Mz+koijKbGLOi3tlUQSA3lQWjOVoS++0\nx48qiqLMdua8uFcE4t6TzFJVFGXHqU56UhoSqSjK/GbOi3tlIifuGcKug2MMXf2ZGe6VoijKzDL3\nxb1YxL1rQKz1sGuCuHdFUZT5y5wX94WlMcKuoblrAIDSeJgjrb2aa0ZRlHnNnBd31zHUl8U53SHi\nHnYdMp6lvXfsRQSKoiiXyo9+9COMMezfv3/M4+9973u5//7RJS5mhjkv7gANFXHOdCUHo2RcY2jt\nSc1wrxRFKTS2bNnCrbfeypYtW2a6KxNSEOK+tLqI3lSW873ia09EXE53DsxwrxRFKSR6e3t54okn\n+Na3vsV9990HSPHqe+65h1WrVnHHHXfQ0tIy2P4LX/gCN9xwA+vXr+fuu+8eND5vu+02PvrRj7J5\n82bWrFnDc889x+/+7u+yYsUKPv3pT09Zf+f8ClWANfWlABw73UzV6mXEIy5tvSkynk/YLYjxS1GU\nHA9+As7umtprLtwArx17hWmOH//4x9x5552sXLmSqqoqtm/fzokTJzhw4AB79+7l3LlzrF27lve/\n//0A3HPPPXzmM58B4K677mLr1q288Y1vBCASibBt2za++tWv8uY3v5nt27dTWVnJ1VdfzUc/+lGq\nqqou+5YKQvlWlHokHI8DrWK5O8bgW+ga0JBIRVGmhi1btvCOd7wDgHe84x1s2bKFxx9/nHe+8524\nrkt9fT233z6UT/HRRx/lpptuYsOGDTzyyCPs2bNn8Nib3vQmADZs2MC6deuoq6sjGo2ybNmyKUsV\nXBCWe0l/E9cWd/Di2RDvCnLLGKC1J0l1cXSmu6coylQygYU9HZw/f55HHnmEXbt2YYzB8zyMMbz1\nrW8ds30ymeRP//RP2bZtG4sXL+Zzn/scyeRQiHaumpPjOIPbuc/Z7NQswiwIy72o6wCbKlKcH7Cc\n6ZQfsCga4kS7+t0VRbl87r//fu666y5OnDjB8ePHOXXqFEuXLqWqqorvfve7eJ5Hc3Mzjz76KMCg\nkFdXV9Pb2zsjETRz23LvPgOnniWc7ae+SPK4t/QkWVQRJxFxae1Nkcp6REPuDHdUUZS5zJYtW/j4\nx0eWiX7b297Gvn37WLFiBWvXrmXJkiXccsstAJSXl/PHf/zHrF+/noULF3LDDTdc8T6b2ZBka/Pm\nzXbbtm0Xf+KeH8L33kv79R/hyb56PryjgT+8cQmvWC0VTs52J7ljTa0W8FCUOc6+fftYs2bNTHdj\nRhnrNzDGbLfWbh6r/dx2yxRLcVk300tR1MU1lo7+ocVLIWdo5aqiKMp8omDE3TgOleEsXT29g4dL\nYiGOtmoKYEVR5h9zXNzF/eJmesAaqiMZerracTMi8NGQS3/ao1OzRCrKnGc+G2mXcu9zW9wjxRBO\n4KZ7wUBdpJ+mPofwQNtgE8eoa0ZR5jqxWIz29vZ5KfDWWtrb24nFLm7ucG5HyxgDxQsIZXsBy7XV\n8Mj5MM1nTlFR2ghAWTzMoZZe1tSVam1VRZmjNDQ00NTURGtr60x3ZUaIxWI0NDRc1DlzW9wBimtx\n+88TC4dYVxOCg7D/XC8vXZ7ED8WIhV2au5N0DWQoDwp7KIoytwiHwyxdunSmuzGnmNtuGYBYOWQH\nqC6OECVLUcjSkgoTSQ6N8K6Bk+f7Z7CTiqIoV5a5L+6RBHgZqouiZK3PgpjP2XSUWN/pwSZlsTCH\nNWpGUZR5xNwX93ACsilK4yFCjkN1zOdcKky87xRYqcYUDbv0JbMaNaMoyryhMMTdy+A6DvVlcSrC\nWVqSLsbLEE51DjYLOYbj7X0z2FFFUZQrRwGIexw8WZVaFAuxIJYl6RmaUxGiA82DzcoTEQ619OD5\n6ppRFKXwmfviHikCPwPWxzWG9eUi9E/3VFPUdRgCP3vYdUhlfC2/pyjKvGDui3s4Lu9eGscxLIxb\nFiU8tp+PEsr2EU53DDaNhV2OtPbMUEcVRVGuHAUg7gl5z6ZwgzVK6ys89nWGyBqXeO/JwaZlsTAn\n2vtJZb0Z6KiiKMqVo4DEXSx3gHUVWQY8w8FUFUXdh8EXMXccg+dbznYl811NURSlICgAcQ/cMk//\n70HLfXWZiPnB3iiOlyaSah9sXhINs/dM95XupaIoyhVl7ot7pEje2w4MZoOsiVlKwz6Hu118N0Ki\n5/hg8+JYiLbeFO29OrGqKErhMvfFPWe5A25fCxbJJ7a81OdQl0smUkai5yjGGyriEQ257GtW611R\nlMKlAMS9aHDT7Ts3uH1NZZaTfS7NAyGM9YgODB0rT4Q53t5Pf3pqqowriqLMNgpA3Icsd+f8YeIp\nyfn80lpJNfBUSxgvVERx96GhdsbgAAfOalikoiiFyYTiboyJGWOeNca8aIzZY4z5fLB/qTHmGWPM\nYWPMd40xkWB/NPh8ODjeOL23MIxDv+DmPZ+nsvk31MQstXGfIz0u2XAJ0f6zgz55gKriKHtOd9Ob\nUutdUZTCYzKWewq43Vp7LbARuNMYczPwN8BXrLXLgQ7gA0H7DwAdwf6vBO2mjwVrYO1boGrF4K6r\njn6HcLKdpcUex3ocMAaLGRHz7joGx4EjLWq9K4pSeEwo7lbImbzh4GWB24H7g/3/Arwl2H5z8Jng\n+CvNdJZAMkbEvbQegEzDzQCUdB1gaYlHc79DV9qQiVVS0rFnxMRqZSLCnjM9JDO6qElRlMJiUj53\nY4xrjNkBtAAPA0eATmttzqfRBCwKthcBpwCC411A1RjXvNsYs80Ys+2yS2c5Liy7DYxDZu3bSIeK\nKe7cz80LsjgGvn0winXCOH6WRM+xwdNCroO1lmNtvXkvrSiKMheZlLhbaz1r7UagAbgRWH25X2yt\nvddau9lau7mmpubyLmYcKF8C7/gOblk97aXrKDu/i8ZEirc1pnnsbIS9nS6ZaDklnXsH87wDVCQi\n7GzqIp31x/kCRVGUucVFRctYazuBR4FbgHJjTK4GawOQK310GlgMEBwvA9qZToyLeIrEl95SsQnX\nG6CsfQdva0wRcy2PNYfx3SihTP+IsMhIyCHtWY62qvWuKErhMJlomRpjTHmwHQdeBexDRP73gmbv\nAX4cbP8k+Exw/BE73fXtjDOY2jfkOHSUrmYgXseCpl8QdWFzdZZnWkNYC9lwESXn94w4vboowo5T\nnep7VxSlYJiM5V4HPGqM2Qk8Bzxsrd0KfBz4c2PMYcSn/q2g/beAqmD/nwOfmPpuj8IZstwBwqEQ\n7TU3keg7RSjdzbWVWbrSDmf6HbKRUqLJc4ST54fauw6eb3XVqqIoBUNoogbW2p3ApjH2H0X876P3\nJ4Hfn5LeTRZjBi13EFdLV8kKGoDiroOsLZdu7u10WVTk4ztRirsO0BG7ZfCc6uIou093say6mLJE\n+Ip2X1EUZaqZ+ytUQXzuw8XddehNLMZz45R27KY+4VMb9/nJyQhZHzLRchI9xwiluwbPcR1DNOTy\n/MkOptuLpCiKMt0Uhrg7DsPdMomoS8o3dFVdS1n7izg2w/tWJDnV5/L42TAYB98JU9yxf8RlKhJh\nTp7v53TnwBW+AUVRlKmlMMR9lOVeVxrH8306qq/H9QYo6dzPTTVZrir22HoqAkAmWkFRz5ERKQmM\nMVQmIjx9pF0nVxVFmdMUhriPstyLoi6RkEtXySqyboLytu0YA7fXZTja43K6zwHjYI1DovvoiEvF\nIy5pz2fHKXXPKIoydykMcR9luRtjqCqO0u87gWtmB8bPcGtthrBj+caBGJ4PmWglJZ37RqQkAJlc\nPXC2h+NtfVf6ThRFUaaEwhF3RlrZlUVhMp5HZ/X1uF6Sko59VMUsH1ydZOf5EN8/HsE6kut9eKUm\nkJTANcUxnjzSTld/5srdh6IoyhRRGOLuOCMsd4BY2MVg6C1fPeiaAXhlfYYbqzP8+GSUcwOGdLSS\n0o5dGH+kiEdCDrGwy+OHWkll1f+uKMrcojDEfQzLPRpysVisE6KraiNl518cFPC3L0uR8eHzLyTI\nmgiOlyLeffyCy5bFw/QkMzx9tB3fV/+7oihzhwIR91GW+7m9RDJdhBwHz/fprBHXTFn7iwBcXerz\nkXUDnOmX0Mh0tFLEf5TvHaCmOMqJ9n6Nf1cUZU5RIOLuQvdpyPRD/3koX4xJD7CgNEZfyqOnbDXp\nSAWLD/0b4VQHADcvyLKi1ONfDkcZIILjpy/wvYNMzi4sjbH7TBe7TnddcFxRFGU2Uhji7rgQTkBv\nqwh8/XVgoK4shm99cFyOrrsH109R0fqsnGLgAyuTdKYdHjgVEd97HuvdMYa60jjPn+xgZ1OnWvCK\nosx6CkPcjSPi7mcgFIPKZeBGiRkPa6UIVLJoEb2lV1PV/BuMLzVGVpd73FiTYcvRKEf6Yzh+lqLu\nI2N+heuIwL9wspPtJzrUB68oyqymQMTdgBsWv3tRjUTPLFxPeKAVxxhsIMTnGu4kmmqjvG3b4Kn3\nrElSErb8zc4EZ00VpedfxMmOnX7AdQx1ZTH2Nnfz+KFWXcWqKMqspTDE3VoR93ilWO4Atesw8QqK\nQxkygbj3VKwnHa2kvHVI3Esjlk9c009X2vDZHWX0ZByKuw7k/Spx0cRo7hrg57vPcr7vQjeOoijK\nTFMY4u5nwQnD4pugeoXsc8NQ1kCJk6Z7IEMq44ExdFRfT2nnXtzs0OrTlWU+n7y2nzP9Dp/Zv4RQ\n2z5C6fy53U2wyMlay892nmFnUydZT8v0KYoyeygQcc+ImNesgLJFQ/uLF7C41GFpdRH9gQuls3oz\nxvqUtT0/4hLXVnr8xYYBDnW7/PWBBhItz1+wMGo0JbEwNSVRdp7q4me7mjnbldTJVkVRZgUFIu6B\n5T6aWBnxcIil1UVSbcnzGShewkBRAw1H/5NIsnVE85sXZLlnbZIXOuN8/OkQrWeOT/jVIcdhYVkM\na+EXe87y2IFWddUoijLjFIa4u1FwxigqFa8AJ4xjPSoSYVJZH4zh6Jo/wfhZKs/+9oJTbq/P8Mlr\n+unIhPnco6389mDzpKzx4miIurIYrT0ptu48w2MHWmjrTaklryjKjFAY4l6zGla++sL9jithkaku\nSmMh0oFfPBOroqdiLZUtT4O90Fd+04IsX7m5n1UlSb799Gm+/PBBmrsmLuBhjKGyKEJdqYj8A7ua\neWBXM8dae0ln1SevKMqVozDE3XHE5z4W5Q2QTZKIhkdkn2mvfQmRdCclHXvHPK0iavns9Wk+vLSZ\nk+29fO6ne/nXp45PWuQrEhHqy+JkPcsTh9u4f/spfnu4lTOdA5qITFGUaWfCAtlznngFYCiOulJb\nNZWlOBqiu/Ia0pEyapt+Tk/FOomVH4XrONzRGOaWqiPc27GR3x5t5/FDbaytK+XGxko2LSmnKDr+\nT1gUDVEUDeH5ljOdSY619mEcQ31ZnMWVcSqLopTGQoTcwhhnFUWZHZjZ4BPevHmz3bZt28QNLwVr\n4cX7IBxnwIZ4+mg7ZbEwjmOoPvMYDUfv4/C6/0pvxdq8lwilu/CdCEerXsGjhzv57ZE22nrTuMbQ\nWJ1gZW0JSyoTLK5IsKAkiuNcOFAMx7eWvlSWvrRY8AZYUBqlpjhKVXGU4mBAiIRU8BVFyY8xZru1\ndvOYxwpe3AFOvwDNO6BkIXvOdNHZn6EoGsL4GdZs/yy+CXFw46fwcwugxiAycI6B4kY6FtyMhcFM\nkfvP9nCivR8v+B0jrkN9eYzFFQkWVcSpSEQoT4Qpj4cpjYcJj2Gh+9bSn/ZIZjwyviU3NBRFQ5TH\nw1QkwlQURYhHXOJheamlryjKeOJe+G4ZkIVNZ14AP0tdWZyWnhSZ/jTliQgnVr6X5bu+QsPR+zi5\n8r15L5GOLaCo+wjJRD0DJVfRWF1EY3URABnPp7kzyamOfk519NPUMcALpzr5zeG2C65THA1RFhex\nT0RdYiGXWNglFnYIuQ4hx+A6hpBjJHUCFiyYYftDjkMs7FASC1ESC1OeCFMcDAQl8TCRkEPEdYiE\nHBxjCLsOjpG5AEVR5gfzQ9yjxVC1DLrPUFlUwUuvrmZHUyfNXQMsKF5OS8OrqW16iNb6VzJQvHjs\naxhDKlZNRctTZCJlZKPlg4fCrsOSqgRLqhKD+6y1dCezdPVn6BxI0zmQoWsgE3yW7ba+FMmMTzLj\nSZjmFJEbBFzHYIykTBCRF6EPuYaI6xB2HaIhh3hEBhjfh1zRE2OMVKMKySARdodeEVeOhVxn8PrG\nyO/gGkMo+J7wqMHKdWT/8M8h1+A6I9uNHuTcYEBzXTNivw5WipKf+SHuAGWL4dweiJYQCYVYV1/K\nibY+znWnaGl4DVVnn6Dh8L9z6Jr/LiGUY2DdCF4oTlXzr2lteM24bhxjDGXxMGXxMEtI5G03eG1r\n8XxL1rdkPUvW98kE71nPkvF8sr68Z4Yf93wynk8qO/Q57fnBNeSafnDtTLA/E1yzP+3RncyQzvp4\nOXeQMRhE4j0/1ycf3xf3kWftRAt3rxiOkYHMNQYnEP3Bz8GAYwwYDI4TvBtwhj0BDT4ljXgyMvhI\nKFkiEiIRdSmKuBRHQ8QjIVwn+IWsASP9gNxAKv/2wS5CjiEednEdQ8azpD2f3mSGVNYn5MjAmXua\nK42FSAQT9NbK34SVy2DMUN8N8m+R67/rmMGnv2hI3ocPojoIzk/mj7gXVUOiGnpboLSeokiIFbUl\n9KY8ejyHU8vfxdL936S26UHOLXlD3st44RLCA21UnHuS83Uvx461eOoSMIHFa4wFfIY87w7G+IRC\nocE9JqctAFgcM2RJOwbCjjMoAtHANRNyzaB4W2sHff9Z35LJ+vRnPGLDrhFyHLxgUMjhOkbE3pPB\nwLMWYwxu0B8/6KCxct2055HOWroH0jJo+TCQ9vDt0ECTG3h8K4JlLXjWx/OQMol2aJDxkYEvN2Bl\nPH/wvMHrDBuEcrGvuTvwg+/J3Vcq6wXnipjmrmOtCKoPg4NlJmsH10nMNYYGQHnKCo0aCHPbuUHP\ndYY9LY166gq5Iz/nns5yT2u5J6/w4JOjGfy3yfp2xKBlrSUSckmEXaJheYoMuw7RYHCKhJxBwyMS\nkmt7PriO1EjOuR5jYXewvTxlDj2Zhlwz+P9hvjF/xD1WJguddn9/cFfYdVi5sJjtJzo4X7GJspqb\nWHjyAXoq1tFfsjTvpTLxauJ9zZS2vUBXzeYxwyjzYa0dIRYpz8MMyrZYY8XREOUJmUAtiYVIREKE\nRv3nGtp2Akty/pDLpZ8OBpncz5/xci4lyGR9PCsDnxs0sIhYZ33LQDpLKusTdsS1ZC2Egugkz/Nx\n3aHtgYxPXzpLKiMRTg5m0EVkbeCOcnLXlz541pLOSP/a+9N4vnxXOOxQHAkRCzuAIZP16U4F7rr+\nDAMZD4vFMGR1W8D35Vo2eGDIjVi+HXraSwdPcbknP98yOIDmBk3fgudZLBbPl79HPxBbPye8FtJZ\nn6T1BwdS3w4bOHNPg0FbPxjoJ/N0Z4J/n9zTxHDjYToZfMrL/V/JPRIN2QAAhF0ZnGRwMCPdkcHA\n4RojT8q+/D92HKnZHA0GF9fI34c7eiAN5tFyA6kb/A4vW1HNq9YunPJ7nj/iDhArh5J6KcWXqASg\nPB5hVW0Jh1p62Vv3Vm7sOsiSg//MgY1/iXUjeS+VTNRS0nWAbKSUvvJVFxzPuUpSQQQM5P6WLCWx\nMCVxEfCKRJiiaGjQ9x0Nje0SUobIWWGxPO6zuczw6LXh7pSc6A4XxuGI8AdPIeQsZMj6/qCbKBuI\nesazgwOauK2GXEk5zYMh11zW9wfF2iIDpwUG0lkGMv6gu8j6Fs9Cf1qK4eTEK+35RBxDJBySp7zc\nvRm5Rs5F2NGXpj+TpWsgi+f7eD6DTwWZrAUjT4q5wSSdtSMGs5GuR4vny0DuebmnhuA3DALNDEPu\ns+GuyNzTYe4JL+PJ4N6dtPi+DIQ5AXeMgaylN5kddIPmfv/cYDl80PSD0UQGU9nX2Z9Rcb9sjIGG\nzbDvpyN2N1QkqCqO0txVxO6+P+S6I19j0eEtnFpxF8bJE3JoHFLxBZSee4buNJyPN+JZf/CPJBZy\nKU9EaKxKDFrhiYhLYtBnqygXks8/boI5hHzI39RYDQpvAByOtUODlRsMJGnPD+Yl5KkiGzxpDFrN\nZuj3dIJBLReZNtw96AdPhemsTzLjYwMXaG5QdJyhp8Lc4GIwg09ewOAgmiP3b2gtpD0PxxhKYnlW\n118m80vcQQp64EhOGTMk3PGwy7LqIrqKbqIte5zqE1vpc4o5Wv/6oJ3YNMOtGixEQ1Us7dnGVXW1\nFC9YTCISoiiqFriiXAkkqmtoUIs5EvmlzEdxd0NQWgepLoiWXnC4LB6GW94FoQGuOvIwtYuXk1x0\nC14wkucmncK5cEDHgUwZ9D4NSxZAfOLIGEVRlOlmfi5zrFwGqd78x40DN3wAKpYS2/Z/KD/+IFWJ\nEDUlUaqKIpTFw8EkZ/DzhRPgRuDAg5DsujL3oCiKMg7zU9xLaiX/e29r/jbGgVvugYUb4MUt8Pj/\ngFRP/vbxYFHTgQfHHzgURVGuAPNT3GNlsPI1Up5vPMoWwW2fhOvfC2d3wlNfG7/0XrwCvCwcehiy\nqSntsqIoysUwP8UdoKhGSvP52fHbGQMr74RNd0Hzi3Ds8QmuWyWumaOPitAriqLMABOKuzFmsTHm\nUWPMXmPMHmPMnwX7P2eMOW2M2RG8XjfsnE8aYw4bYw4YY14znTdwyTiuJBTrPz+59stfBVVXwzNf\nh2e/Ob5wl9RCZ5MMBL4W5lAU5cozmWiZLPAxa+3zxpgSYLsx5uHg2FestX83vLExZi3wDmAdUA/8\n0hiz0lo7+1SueiWc2y0CPNGCGMeFV34Wdn4P9v8U2g7Cqz4vk6ljUVoP54+I737pyya+vqIoyhQy\noeVurW221j4fbPcA+4BF45zyZuA+a23KWnsMOAzcOBWdnXKKqmTCtO/C1Lxj4kZg0x/CSz8CXU3w\n3D+Bl8dvbwyULoL2Q2LBZ9NT129FUZQJuCifuzGmEdgEPBPsuscYs9MY80/GmIpg3yLg1LDTmhhj\nMDDG3G2M2WaM2dbaOk7UyqQeK3sAACAASURBVHSzcAOEYtBzbvLnLLkZNvw+nHgCtn5Esk2ORU7g\nzx+Dgw9Cun9q+qwoijIBkxZ3Y0wx8H3gI9babuDrwNXARqAZ+PLFfLG19l5r7WZr7eaampqLOXVq\niRTB+rdKBE2ye/Lnrf9deMVfQigKj/8ttB8Zu50xsmgq2S1pDybr41cURbkMJiXuxpgwIuz/Ya39\nAYC19py11rPW+sA3GXK9nAaGV7xoCPbNXkJRscaT3RcX4bJwA9z+VxAtg1//bX4LHiTlMMDen1zc\nU4KiKMolMJloGQN8C9hnrf37YfvrhjV7K7A72P4J8A5jTNQYsxRYATw7dV2eJkrr4KqXQE+z5J2Z\nLPEKuO3jMmH6yF/DwZ/nbxsrhWiJWPCdp/K3UxRFuUwmY7m/FLgLuH1U2OPfGmN2GWN2Aq8APgpg\nrd0D/CewF/g58KFZGSkzFrVroWaVFPS4GEoXwRv/J9Rvghf+A5p35m8bSUCiSgaB9qOX119FUZQ8\nGDveissrxObNm+22bdtmuhtCJgn7H4CB8xJNM04pvQtIdsOj/zd0n4abPyRPAvnIpqH3nLSpXXdR\nBT8URVEAjDHbrbWbxzo2f1eo5iMcg3VvhqteCpmByYdJgrhdXvlZqFoJT/4D7PkhQdXpCwlFxBV0\n4kk4+bQudlIUZUpRcR8Lx4XaNbDmTZDpl5j2nmZITyIhWKRI8tEseQns/K5Y8vkGCCck+WvO7oLD\nv9J8NIqiTBnqlpmI9qPgOBKj3vSshExOxlVjLRz7NTz3TbHeF98o+WlyUTOj6Tkn/virXiqCryiK\nMgHjuWXmX7GOi6Vq2dC2ceDYYxCvEgt9PD+5MbDsNliwVpKI7f+ZpCx47d9KxMxoSmolVfCBB6Bu\no0zOuvrPoyjKpaFumYuhcpkIbygmk6aTKcxRvACueTvc8TmZcH3oU/nj4aPFUsD77IsSLjnQOZW9\nVxRlHqHifjGEIrLYae0bYfUbpHhHb8vkinNULoNX/pX42R/9ovjYx8JxJLQyOwB7fgQdJ6b2HhRF\nmReouF8qpXWSBrh2PWChr33ic2pWw2u+KCtbn/sm7PiP/Aum4hUQL4ODD8HpF/JH3SiKooyBivvl\nUNkIDdfD6teLxd1zFrLJ8c8JJ+Dl/10Ghn0/hUe+mH/RVCgmqYNPPyd++/HK/CmKogxDxX0qiBRJ\ntabaIH3wRDHrjgub3w+bPwAdx+Dhv4Km5/K3LW2ArtOw635oOzx+qT9FURQ0WmbqSFTKCx/O7JBw\nRjPO2GkMrHiVpDt4+uvwmy+Lld5wA2z4g5HFPYyB4hpZ1XrkEeg8LnH0kTyFQhRFmfeo5T7VLNos\nPvWuJomOmcjKLl8Cd3xeYuAT1bD3x/CLT8OpZy5sG4pAWWDF7/mhuIEURVHGQBcxTQe+D10n4dxe\n6G6SQtxOCGLlE8euH/017PuJhFpu/ENY88ax26X7oL8DFt8AC68Rn7+iKPMKXcR0pXEcqGiUV1+b\nWPGZfmjZJwI/njtl2e/IKtWnvhZE01hY+6YL20WKJA9903PQfQaWvlzi5BVFUVBxn36KqodSDhTV\nwuGHwSuDeHn+c9wQvOTD8JQDL35HFkttfKdY/8NxQuKm6WsTN83Sl4ubRzNMKsq8R5/lrySVSyVs\nMlIkbpfxioI4LtzyIVjxajjwM/jRn8Cz3xw7bLKoWq558CE48qikLVYUZV6jPveZwMvCyafEJ1+8\nQNIMj8eZHXD8cWjaBn4GVr1BLPnR0TjWiviHY3D17XJtRVEKFvW5zzbckBTpKKmD409AshOKa/O7\nU+o3yquvFXZ9D/b/FPrOwXXvkapOOYwZSkC298ew+GYpBKKTrYoy71BxnykcF6qXi8/85FPQfghM\nENserxzbmi+qgZv+RBY17fqelPPb/H7xtQ8nWiyrW08+BV2noPFWKSSiKMq8Qd0ys4XeVugP8tOc\n+K3444uq8+eO722RxU+t+6DxZSLy4fiF7frawHrQ+PKR6YsVRZnzjOeWUXGfjaT7pb7qoV9CycL8\nsfG+D3t+AHu+L5E4t34UKq66sF02KYNHaT1UrxKRH74CVlGUOYnWUJ1rRBISWXPVLVLeL98A7Diw\n4ffg9s+Al4bH/l84f+zCdqGYuH8yfVJsZP9W6G7WTJOKUsCouM9mFqyF6hWyCMrLiICP2W6N1G21\nVoqBPPf/XZhB0hiIlgYiPyAZKQ/+fHIFRxRFmXOoW2a24/vQshdOPSu5ZTIDEIpDUdWFbdN9kjny\n0EOSWviat8PVr8wfLdPXBl5KctLXXyfXVxRlzqA+90Ig9+/UfUZSDqR68hfb7jwF278tg8KizXDz\nByGSJzWB74t/PxyHpS8Ty15RlDmBinuhkeqVBGM9ZyBWNnbBbWvhwIPwwr+JD3/tWySUsnplkJp4\nFOl+idYpXwKLbxy7jaIoswoV90Kl55xMkKYHZPHSWHScgBf+Hc7tks/hONz4X6DhxgvdNdbCQIck\nOateJQunND5eUWYtKu6FTDYNRx8Rd01J3dhtrJXUw6le2PZtSUdcvwle/t/GLihi/SA+3oclt4i1\nr6tcFWXWoaGQhUwoIpOmxQvFSh8rvNEYKFssUTWv/gKseROceQEe/x9w7HGJxBnR3pG8NIlKyWlz\n4AF5StDQSUWZM6jlXkiceAqaXxTfejieP1eNtXDwQXjxPgmvLF4o2SdXvvrCtMIAA50SiRMpEndO\nokImaDW6RlFmFHXLzBe8DJw/Cuf2yORotHR8n7mXhrO7ZYVr+xFJXrb4RklVUL74wvaZAeg/L4OG\nGxGXTeVSXe2qKDOEivt8pLcFTj4tdVYnKtYNEkd/4EFo2w8YuOUeyVyZj2xS/PJuVCZeq1dOnLpY\nUZQpRcV9vmItnHhS4t3diFjY2RQULcifr6b/PDz5j9B+EFa+VkIoxyvf52VE5LFQUg/114qbRydg\nFWXaUXGf7yS7pH5rNiWumqZn5T1fqb90Hzz/L3DsN7LStfGlMhlbd618HgvrQ7Ib0r2SsnjJTSL2\nKvKKMm2ouCsjadkPJ5+EeNX4k6KdJ4fyxnspiaBZtFkWTtWuh6qrxz4v1SsFSOLlsOQlko1S67oq\nypSjlZiUkSxYDb4neeNjZZI1ciyRL18CL/uYWOOnnpNargceGDpef50kNlv9BnDDQ/ujxfJK9cL+\nB6BiCTTcoKteFeUKopb7fMX3oXmH5JXpa5W6rm5YomvcPNa870PLHihdJMW4T/xGfPShuIRHll8F\nq14ngp/DWhg4L5E25VeJayffalpFUS4Kdcso4+NlxC9/5nkp6pHpF9/6ZCzts7vFxTPQIeGUmX64\n4f+Cpb8z0hVjffmOVB+U1Yt7R0VeUS6LyxJ3Y8xi4F+BWsAC91prv2qMqQS+CzQCx4E/sNZ2GGMM\n8FXgdUA/8F5r7fPjfYeK+yzCWvGX7/4hFNeMvagpH6leeOLvJTqntF7SG4yVEmGgU9pWLRXXjrpr\nFOWSuNz0A1ngY9batcDNwIeMMWuBTwC/stauAH4VfAZ4LbAieN0NfP0y+69cSYyBeIX4yHvOSZx8\nJik+ej87/rnRYnjFp+HmPxUr/YG/kPzy6b6R7eLlEnvf3Qy7vy/x+JmB6bsnRZmHXLRbxhjzY+Br\nwes2a22zMaYOeMxau8oY841ge0vQ/kCuXb5rquU+S0l2S76a1n1iafsZEX43KtEzkeL8UTB9bRJO\n2fScnHPde2Sx0+iC374PfS1gXFh8A1QtHzk5qyhKXqbM526MaQQeB9YDJ6215cF+A3RYa8uNMVuB\nL1lrnwiO/Qr4uLV226hr3Y1Y9ixZsuT6EydOXOx9KVcS34P2o3B2p9RijVVA71nASM6ZUEwEPxQf\nGXnTfgSe+YZkojQuVC+XRGdLXz7y+tk09LdKTpzFt0BFo8bIK8oETEkopDGmGPg+8BFrbbcZZrFZ\na60x5qIeAay19wL3gljuF3OuMgM4LtSsgMpG8cu7YYmyyQzA2V0ykVpUAx3HxYees9CrrobX/D+y\ncKrjhEzaPv2/4dQzcN27JZ8NyIBQukiud+RXEqJZv0li62NlM3XXijJnmZS4G2PCiLD/h7X2B8Hu\nc8aYumFumZZg/2lgeNaphmCfUggMd5kUL5D3iquG9p0/Dod+IX71nNvGDUmemqteInVd92+VZGU/\n+wtY80ZY+2YIReX8cFxK/aX74ejjgC9WfP0mWfmq1ryiTIoJ/6cELpdvAfustX8/7NBPgPcE2+8B\nfjxs/7uNcDPQNZ6/XSkwKhth1Z0SZdPbcuFxx4G1b4LXf0UyUO75AfzsYzKpOtxFGElIyGTpIonF\n3/Mj2H0/nNkhE7yKoozLZEIhbwV+A+wCctUaPgU8A/wnsAQ4gYRCng8Gg68BdyKhkO8b7W8fjU6o\nFiDpfjjwcxhoh0R1/oyRLfukmHfnSShvhBV3wLLbxg7BzCQh2SG++4XXyNNB+RJNOazMW3QRkzIz\n+J4scmrZKykM8iUS8z3xsx95ZMhnv+wVkl2ydt2FcfBeBvrb5LxYubhsyho05bAy71BxV2YWLysh\nked2S15534OiavGvD8daKf934MGhgt6REtj4TvHXjw6jBImhH+iUQaN2g0zg6qIoZZ6g4q7MPNaK\nqGNlYdSRX4l7JVE5diGR/vahWPnzR8VNs2gzLL8DFq6/sL2flfZ+VgqH1G8avwqVohQAKu7K7CPZ\nBSefkvDIkvr8xUOshdPb4MijYvl7aVh0PSzcIGmHyxpGtfehr10WXC1YKznsKxtlYta4Gm2jFBQq\n7srsxFrJFd+8Q0Q7UZm/GAhImwMPwp4fSpk/gIXXQkNg0Q9fLet74pc3rrR1QiL8JfWwcJ3kvNGV\nsMocR8Vdmd14GYmWOf6EbMdKxL+eL/VwqkfCLM88L5OwAx0SYbP8DqhYln/S1hg5N9Uj165eKRWm\n8lWkUpRZjoq7MjfIJKH7DLQdFJ97uh/wx7eyrYWd98HeYJlF2WK46YP5q0Tl8LOSi95Ly/XrroHS\nBnXbKHMKFXdl7uFlxMLuOSsVo4wjCchCsbGTleUGhR3fgVS3xMGXLIRoSRAmWSRFQ6pXSjriHNZC\nugeSPRK9U7cRalaqy0aZE6i4K3ObgU5Ja9D8AlgPnPBQ6oPRpPvh0ENSDjDVc+Fx48KmP4JVr73w\nWC55WSguFaPKF8ug0t8uqQ80+kaZZai4K4WBl5HEYieflCgbE5KEY5HEhROx2VQwkRqGjmOS2Kyk\nHl78DpzeLgnLlr1CctuMXuGaTUJ/hwwkIGmJXRcqlkqUTjyIo88X4aMoVwgVd6Ww8LKSb8Y4EgPf\ndUp850U1E5/r+7Dvx9D8IrTul2ssvCaIn79m7ELhIJE2/edF+I0jE7INN4hvX104ygyh4q4UNul+\nqejkZyTkMVGdv4hIjlz8fMs+OPxLGRwqlkr914kmY62V3PV97eLmqVkpFr26bZQrjIq7Uvj0tUP3\naYltbzsEiSopIjKcdF8Qalk2UvyzKWjaBtv/Sdo03AC3fGjsdAej8X35Ti8tqYkXXiPzARMNLooy\nBai4K/MH34P2w5KsrK9tWGoDK4IfiskgULrownMzQSbL3d+DyuVQuUzcPnXXwIbfH/97c4XF0/2S\nN2fhBnETqTWvTCMq7sr8pP+8+MadkFjW0RLxne//mUTARIqlqPdojj8Bz/yfkQXBKxphyS0yCRsp\nHj8ePtktWTBBslpWLpNzIuOsvlWUS0DFXVGGk+yWLJUDHcEAEIRWDk9glkmCQXzqu++HE09KWUGQ\n6Jqq5SL28UoR76LqC78nV/zb+nKd+k1QvUJFXpkyVNwVZSzS/eLCSfVAy34JfSxbNHaWSt+TdAf7\nt8qCqPNHxQ2To7ReFkiteLWI/Wi8dDAB60jis8pGeZJQlMtAxV1RJiKblvj3c7vFhTJ60nU01ool\nn+qBsztlErd1v0zYbvojWQRVsvDC83KFRqyVqBzfg7IlEC2S2HutKqVcBCruijJZes5B07Pirsm3\nCjYfqR544isymQtw1Uvhxj8eO+omFzcPYtVbK+kPatdD5VKZiM2mgph6jaNXxkbFXVEuhnQ/7PxP\nWdCU7hd3TfmSyZ3r+zI4tB2QyJt4OdSsFldM/UZ5KshHNiXzANYXqz7VJ/lwGm4QH7+uiFVGoeKu\nKBdL22FJRFZ1tfjaLTIRmi8N8ViceQGe/EdxxfgZcKNw3V1w9SsncPkEVr2flWRpfW0S8VO5VAaZ\nopqxo3yUeYeKu6JcDl1NcOxxiaCx3pDLJFYhLpVsUqx8C4SiI90oXkYiZc7ulBDMc7sgWgrlV0G8\nTCZni6olBr9quWznm9BNdgZFSoykKV6wRoTeCWlx8HmKiruiTAUDHRJV03VSLOreVrHmi2qGYuq7\nmkSoxxJb60txkZb90HEcupsubBMphg2/B8tfJYI+Vq4b60scfTLIeumExO1Ts2qovZcVN06yW54A\nYuWaq74AUXFXlKnC9wGbP6ql4yQcfAjCUclUOToFQo5ctE2sHJIdkta46xScfFoidnJULoNr3i4T\nrfm+08vIQBMKSzhmKAann5fom95msEaE3rhQcZW4dvrb5T2X4dJ6OnE7B1FxV5QrSedJEfnzRyUC\n5mL849bKhOyL98kTQc+ZII2CK8JdUjvkkqleOfLcbEoidrwMFFWJGymSEMve94ZSJHhpwIobyY3I\nYi0vA5VXQ+1a+V7NjTMnUHFXlJmgrw32/RRRUSNCGyke26eeDy8Dx38DZ3dB5ylxDWX65NjyV8Ga\nN0DRZSQqy6VYMM5QSuN4hTwplDXoxO0sR8VdUWaK3lYJiwwXiY+9u1mSljmOWNI5UfazYmEP35eP\nvjapNHXgAflcuw42/pFE08BQpE3xAvG597dDskvSFC9YN7Fgp/uD1bdW+lpSJ7l1tJD4rEPFXVFm\nA9ZC03YpF2gcmRgFwIg/3fqy7WfFX56vcEiOk0/Lgqnjv5EKVRWNECmB1n3BJGqZiPpoIiWw6Dpo\nvFWyVw50ygRt6aKRA4u1Uo82MyDXq2gcqkGr/vlZgYq7oswm0n1SpzWbRFw2yCSo9UX02w9L6KUb\nkePxivHj69O9cPTXcOTRYAHUMhHks7tg5WslVj9WJj75449LwXGLXLuoZighWqISqoLCI8teMTK6\nZjClcZ9MFC+6TiZ7Q9Hp+Y2USaHirihzjZ6zUifWDUPzTrGc3bBY1l6u4lSlvI+FtUPnjMb3wU/D\n8/8mK2BrVsvg0XZQXv3tUs2qbBEsvkni74ev0M2mJD8ORurSRhIShVNUkz86SJkWVNwVZS6T6pXU\nwV2nxVIOJSDdDWd3Q2ldfoG/FKyFk0/J6/yRofw31Stg1etg8c1DrhtrJTrHzwwtrlqwRl7xiqnr\nk5IXFXdFKUTOvCgulliZWPETke4NEpHFJregKZsWgT9/FA4/LE8TV98OG/5g7MnV4SUHy5eIe6d4\noS6emkZU3BWlEPGy0HpAVrv2NIsLJpwQEfez4sePFMmEKT4kaoK88q0yIESKJu8z933YuQX2bZUB\novFWKT2YqLowusdamchN90mqhoXXSIROUY366KcYFXdFKWRyFZ/aD0scfOkiyV1z6GHAQv11svgp\nl6O+abtY2L3n5HzPA4LIHWNkUjZWNnYGy55mOPgLOPQLWdUK4oKJlsok6+rXjzwv0x8MLhacsAh9\n1dVaW3aKUHFXlPlIqvfCRGbD6WuDAw/KqtTqVSLWvieW/5HHhlayGleqRg2Pj28/LFkv+1plgjXd\nC+f2yJPD8leJ0FctH5kywcvIZK2fFSu+arm0L6kdmohNdskgoKUIJ4WKu6IoF4eXEQu+86T43tsO\nirUfr8wvvB0npN7s6W1B8ZEiqUi1+EaJuhnuvkn1Sgx9jrLFsliq6VlkYna1RPFMZi5hHqPirijK\n5WGtCP3Bh6R84HiLmNK9EslzZodY96kuKTiy6rVQs2YMH70vK2lTPWLRu2Gx8L20iH7dNRKaGYpI\npSwIUh3rRO1libsx5p+ANwAt1tr1wb7PAX8MBKsf+JS19oHg2CeBDwAe8F+ttQ9N1EEVd0WZIzTv\nEsH2UpLTZqJVtNaHF/5NUh1nU7I6tmYlLH25hExGx/G9D5+YNWZowZXvyZxA5dWyYCteMW8TnV2u\nuL8c6AX+dZS491pr/25U27XAFuBGoB74JbDS2tzMy9iouCvKHML3pCD4scdFVI0DmKFCJmMJdjYl\nsfNnd0LLPpn4BbHIGzZLWoPOk9B+SGrPLr55pPvH+iLyucneTFLcOn5W5gNCcUmLUFonx93ovChL\nOJ64T3j31trHjTGNk/yuNwP3WWtTwDFjzGFE6J+a5PmKosx2HFd84vFy8c27EXGleBkR/K4mmYQN\nx8RSd0MysbvsNnn5nrTrPCk57A8+BAd/LtcOxWRidtu3YfENcO27hqpTRUuG+hCODRVEySblSeLs\nTsnbg5H+1G2SVbah2LycoL2coe0eY8y7gW3Ax6y1HcAi4OlhbZqCfRdgjLkbuBtgyZJJFh9WFGX2\nULLwwn1r3wy9ZyWzZO9ZyWvvpUVcc6tWHReufsXQOdmULJTK9EvYZvthSYZ27Ndw6llZDOWEJLdN\nskeqTl31ErlevELEG0amPvDS0PScnG+QFbZVy+fVoqpJTagGlvvWYW6ZWqANST/010Cdtfb9xpiv\nAU9ba/89aPct4EFr7f3jXV/dMopSoHhZWWR1+GGJtImWTN4/3tsC+7eKJY+BntMQLQvSEQdEiiWq\nxs/CilfL5OvodAy+Lzl0sikZZBask1w4BZDC+LLcMmNhrT037OLfBLYGH08Di4c1bQj2KYoyH3FD\nsmjJS0PHMVkEZS2D2S5DsfzlA4sXwOb3D31O9Yp13nVKhL+/TaJy2g8BBh7/W3kPRcVvv+4t4tN3\nHHHtgAj8mecl5LJ4ofStfMlQDH82JWkWkl3yBBFOyBNF+VUyeQsywMwB6/9SLfc6a21zsP1R4CZr\n7TuMMeuA7zA0oforYIVOqCqKAogVnemXUMdjvxHR970hgc+lPQ7HZGI2n/CPxktLRE53s1jpZ14I\nqkwZseaXvUIs/Jy1bq1UtEr2AL7MG0RL5ami44RY+LEK6Y/jDhUax8rTR91GKY4yw+kULjdaZgtw\nG1ANnAM+G3zeiLhljgP/ZZjY/yXwfiALfMRa++BEHVRxV5R5iLUiyrlwx1QvxMtEcPtaxA/vhIMJ\nVTMk/JOhr03SLyQ7JK/9QIe4a6qWw/I7xLIfzG7pyyublhj9nLWfj0wSBtrBhIJyhPUz5svXRUyK\nosw9Uj1i3XefHhL1nEunqFr8+VgJewQR17HSH/tZcbE0PSeZNLubJMZ+07uHShMOx9qhvPZtB6Uf\nteug8eXSj5yIe9mhdAqRBJQtkYnbeIVMJjuhoUVZ04SKu6Ioc5f+8yKQoZgIbXcznH1RJmhBEqA5\nIXH3RIpl2w2P7TLxfTj8C9j9A4mTb7gBVt4pln52QCZv+9vlqQECd03xUF77SJG0X/X6keGV2bRc\nL5uW6BzrAY7MOcSrZDCxvvTL9yStQjghLp/LEH8Vd0VRCpdMUkS465RMsFpf3DA2G/jR3aGY+Bz9\n7RKJc/ChYbVsAyqvlnw49Zsk340TEh/+qadlcDnzggwcjS+TLJjFtSPdRcPdR74nJQ+TXYgX28i7\nMbLthOW7Fqy+pFtXcVcUZX6RGZBc9+ePBn797iC7ZXFQzSqw6vtaZQK1pFasejcsK13H4/wxOPgg\nnHhKqlAlqiRB2qLroXaDhGq27oeaVZKiYbzQz1SPLPRa/dpLuk0Vd0VR5i/ZtIRgZlPQeQK6z4il\nP9k495yff/Rkbu85OPm0rIxtPRBE04wiViZx9StfE6zmDUk/FqyTyd5QbNrEvfCTLyiKMr8JRWTR\nEkjSsoEOOPRLEfySurHPyYVKDnSLJwXEAg8nJJWxGxJ3zNo3y8vLwqlnoOeMtK1eKU8EbQfgzHY4\n+eTI6xtH3DcVjbD2LZcs7uPe9pRfUVEUZTYTr4B1b4UDD4gAly0S102qNyhYYgFfxLvxpSLAxoHT\n22XStKtJ/PDxyqHkZG5I2g6n7lp5T3aLv944MjhYX9xFoahE8PS1T8ttqrgrijL/cEOw+g1wbrcI\nbLRUXCWRuAhwourCUoBX3SLvAx3Qsl9cMSCLmsLx/L71WKmkRhhO463yvvr1EJqepGYq7oqizE8c\nR1av1qyWidTJ5ryJV4jQ128SV0z/eYnFt1ZE3npDdWlzGTNjZfkXYE12YdZFouKuKMr8ZqKCI/kI\nx2DZ78h2qlfCHTtPyiRpSe1Qnpp0r7hh3IgIuZcRt461EltfFhv/ey4RFXdFUZTLJVosr7JRGc5z\nK2A7T4pv3fdE+HvOic+9v00KjUwDKu6KoijTTfkSeQ1+Xpy/7RQx+/NWKoqiKBeNiruiKEoBouKu\nKIpSgKi4K4qiFCAq7oqiKAWIiruiKEoBouKuKIpSgKi4K4qiFCCzIp+7MaYVOHGJp1cDbVPYnbmA\n3vP8QO95fnA593yVtbZmrAOzQtwvB2PMtnzJ6gsVvef5gd7z/GC67lndMoqiKAWIiruiKEoBUgji\nfu9Md2AG0HueH+g9zw+m5Z7nvM9dURRFuZBCsNwVRVGUUai4K4qiFCBzWtyNMXcaYw4YYw4bYz4x\n0/2ZKowx/2SMaTHG7B62r9IY87Ax5lDwXhHsN8aYfwh+g53GmOtmrueXjjFmsTHmUWPMXmPMHmPM\nnwX7C/a+jTExY8yzxpgXg3v+fLB/qTHmmeDevmuMiQT7o8Hnw8Hxxpns/6VijHGNMS8YY7YGnwv6\nfgGMMceNMbuMMTuMMduCfdP6tz1nxd0Y4wL/C3gtsBZ4pzFm7cz2asr4Z+DOUfs+AfzKWrsC+FXw\nGeT+VwSvu4GvX6E+TjVZ4GPW2rXAzcCHgn/PQr7vFHC7tfZaYCNwpzHmZuBvgK9Ya5cDHcAHgvYf\nADqC/V8J2s1F/gzYTmfYjgAAArxJREFUN+xzod9vjldYazcOi2mf3r9ta+2cfAG3AA8N+/xJ4JMz\n3a8pvL9GYPewzweAumC7DjgQbH8DeOdY7ebyC/gx8Kr5ct9AAngeuAlZrRgK9g/+nQMPAbcE26Gg\nnZnpvl/kfTYEQnY7sBUwhXy/w+77OFA9at+0/m3PWcsdWAScGva5KdhXqNRaa5uD7bNAbbBdcL9D\n8Pi9CXiGAr/vwEWxA2gBHgaOAJ3W2mzQZPh9Dd5zcLwLqLqyPb5s/ifw3wE/+FxFYd9vDgv8whiz\n3Rhzd7BvWv+2tUD2HMRaa40xBRnDaowpBr4PfMRa222MGTxWiPdtrfWAjcaYcuCHwOoZ7tK0YYx5\nA9Bird1ujLltpvtzhbnVWnvaGLMAeNgYs3/4wen4257LlvtpYHgJ8YZgX6FyzhhTBxC8twT7C+Z3\nMMaEEWH/D2vtD4LdBX/fANbaTuBRxC1RbozJGV7D72vwnoPjZUD7Fe7q5fBS4E3GmOPAfYhr5qsU\n7v0OYq09Hby3IIP4jUzz3/ZcFvfngBXBTHsEeAfwkxnu03TyE+A9wfZ7EJ90bv+7gxn2m4GuYY96\ncwYjJvq3gH3W2r8fdqhg79sYUxNY7Bhj4sgcwz5E5H8vaDb6nnO/xe8Bj9jAKTsXsNZ+0lrbYK1t\nRP6/PmKt/UMK9H5zGGOKjDEluW3g1cBupvtve6YnGi5zkuJ1wEHET/mXM92fKbyvLUAzkEH8bR9A\nfI2/Ag4BvwQqg7YGiRo6AuwCNs90/y/xnm9F/JI7gR3B63WFfN/ANcALwT3vBj4T7F8GPAscBr4H\nRIP9seDz4eD4spm+h8u499uArfPhfoP7ezF47clp1XT/bWv6AUVRlAJkLrtlFEVRlDyouCuKohQg\nKu6KoigFiIq7oihKAaLiriiKUoCouCuKohQgKu6KoigFyP8PpwpwF3m8Yi0AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9054f0c9-36cb-4d85-80bd-f68c7f763f53",
        "id": "k1-qq6ppV52T",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Test Loss plots\n",
        "\n",
        "smooth_plot(test_loss_history_stochastic_sgd, label='SGD_test')\n",
        "smooth_plot(test_loss_history_stochastic_adam, label='Adam_test')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f1540103908>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nOy9eZxddX3//3yfc89dZ99nMhOSkARI\nWAKERQHLKuBXRWtbaSta9FHso+JSWr8KP2nRyre27t2sWG3VWpRirYiggISyqEACMSshe2Ymk5nJ\n7Mvd7+f3x/tMZp/cycxkufk8H4/zmHvP+ZxzPudCXp/PeX/eixhjsFgsFkth4ZzoDlgsFotl/rHi\nbrFYLAWIFXeLxWIpQKy4WywWSwFixd1isVgKkMCJ7gBAVVWVWbJkyYnuhsVisZxSbNiw4bAxpnqq\nYyeFuC9ZsoT169ef6G5YLBbLKYWI7J/umDXLWCwWSwFixd1isVgKECvuFovFUoCcFDZ3i8VyapNO\np2lpaSGRSJzorhQk4XCYxsZGPM/L+xwr7haLZc60tLRQXFzMkiVLEJET3Z2CwhhDV1cXLS0tLF26\nNO/zrFnGYrHMmUQiQWVlpRX2BUBEqKysnPVbkRV3i8UyL1hhXziO5bfNS9xFZJ+IbBaRjSKy3t9X\nISJPishO/2+5v19E5O9FZJeIbBKRi2bdK4vFYrHMidnM3K8xxqwxxqz1v38S+IUxZgXwC/87wM3A\nCn+7A/jafHV2Ovp3PMfOQ/0LfRuLxWI5ZZiLWeYW4Nv+528D7xiz/ztG+TVQJiL1c7jPUek53MZr\nLV0LeQuLxXKSc//997N69WrOP/981qxZw4svvkgmk+Gee+5hxYoVrFmzhjVr1nD//fcfOcd1Xdas\nWcPq1au54IIL+OIXv0gul5v2Hhs3buSxxx47pv719vbyz//8z8d07rGQr7gb4AkR2SAid/j7ao0x\nbf7nQ0Ct/3kR0Dzm3BZ/3zhE5A4RWS8i6zs7O4+h66O45BhKJsjlbFUpi+V05Fe/+hWPPvoor7zy\nCps2beKpp56iqamJT33qUxw8eJDNmzezceNGnnvuOdLp9JHzIpEIGzduZOvWrTz55JM8/vjjfPrT\nn572PqeSuOfrCnmlMaZVRGqAJ0XktbEHjTFGRGalrMaYB4AHANauXTsnVU6nMyRyKYZSGYrD+fuB\nWiyW+efTP9nKtoPzayZd1VDCX71t9bTH29raqKqqIhQKAVBVVcXw8DDf+MY32LdvH+FwGIDi4mLu\nu+++Ka9RU1PDAw88wCWXXMJ99903aREzlUrxl3/5l8TjcZ5//nnuvvtu3vrWt/LhD3+YLVu2kE6n\nue+++7jlllvYunUrt99+O6lUilwuxw9/+EPuvfdedu/ezZo1a7jhhhv4/Oc/Pz8/zjTkJe7GmFb/\nb4eI/Ai4FGgXkXpjTJtvdunwm7cCTWNOb/T3LRjpTIZsLk08nbXibrGchrz5zW/mM5/5DCtXruT6\n66/n3e9+N+Xl5SxevJji4uK8r7Ns2TKy2SwdHR3U1taOOxYMBvnMZz7D+vXr+cd//EcA7rnnHq69\n9lq+9a1v0dvby6WXXsr111/Pv/zLv/DRj36UP/zDPySVSpHNZvnc5z7Hli1b2Lhx47w++3QcVdxF\nJAY4xpgB//Obgc8AjwDvAz7n//2xf8ojwJ0i8n3gMqBvjPlmQUil03iBHOmsNctYLCeamWbYC0VR\nUREbNmzgueeeY926dbz73e/mnnvuGdfm3/7t3/jqV79KV1cXv/zlL2lqaprmavnzxBNP8Mgjj/CF\nL3wBUH//AwcO8IY3vIH777+flpYWfvu3f5sVK1bM+V6zJZ+Zey3wI/8VJQD8pzHmZyLyMvCQiHwA\n2A/8nt/+MeAtwC5gGLh93nvtk0sO0dzSTPdgEq88Ryoz/UKIxWIpbFzX5eqrr+bqq6/mvPPO4+tf\n/zoHDhxgYGCA4uJibr/9dm6//XbOPfdcstnslNfYs2cPrutSU1OT1z2NMfzwhz/krLPOGrf/nHPO\n4bLLLuOnP/0pb3nLW/j617/OsmXL5vyMs+GoC6rGmD3GmAv8bbUx5n5/f5cx5jpjzApjzPXGmG5/\nvzHGfMgYc6Yx5jxjzIIlan/x59/jjO9exvdfzxJ2DPFUZqFuZbFYTmJ27NjBzp07j3zfuHEjZ511\nFh/4wAe48847j0R3ZrNZUqnUlNfo7OzkT/7kT7jzzjunDRoqLi5mYGDgyPcbb7yRf/iHf8AYtRq8\n+uqrgA4Sy5Yt4yMf+Qi33HILmzZtmnTuQnNK55Y5a1E1vAKDKYMnOYZTU4/GFoulsBkcHOTDH/4w\nvb29BAIBli9fzgMPPEBpaSn33nsv5557LsXFxUQiEd73vvfR0NAAQDweZ82aNaTTaQKBALfddht3\n3XXXtPe55ppr+NznPseaNWu4++67uffee/nYxz7G+eefTy6XY+nSpTz66KM89NBDfPe738XzPOrq\n6rjnnnuoqKjgiiuu4Nxzz+Xmm29e8AVVGRlxTiRr1641x1SJaddT8B/v4n3Ze/n96y4l2nA2b1qZ\n3+uUxWKZP7Zv384555xzortR0Ez1G4vIhjGBpeM4tXPLuOr2RC5LgIyduVssFovPKW2WIaC+q2Iy\nONkkQ0kr7haLZe78/Oc/5xOf+MS4fUuXLuVHP/rRCerR7DnFxV1n7iHSZDLq557LGRzHZqezWCzH\nzo033siNN954orsxJ05ts4w/cw+SJpHUkOKkdYe0WCyWU13cgwCEJE0ylUIEkhlrmrFYLJZTXNx1\n5h4iTTyZxhg7c7dYLBY45cV91OYeT2sAUyJtZ+4Wi8Vyiov7GJt7KosjMJS0UaoWy+nK//zP/yAi\nvPbaa1Me/6M/+iMefvjhBbn3XFP6fuUrX2F4eHje+nNqi7s7OnMfyjp4jmHQirvFctry4IMPcuWV\nV/Lggw8e93ufbOJ+artCOg7G8QhJmq6MECLHQMKKu8VyQnn8k3Bo8/xes+48uPlzMzYZHBzk+eef\nZ926dbztbW/j05/+NMYYPvzhD/Pkk0/S1NREMBg80v4zn/kMP/nJT4jH47zxjW/k61//OiLC1Vdf\nzYUXXshzzz3H0NAQ3/nOd/ibv/kbNm/ezLvf/W4++9nPTnn/T37yk5PytX/+85/noYceIplM8s53\nvpNPf/rTDA0N8Xu/93u0tLSQzWa59957aW9v5+DBg1xzzTVUVVWxbt26Of9kp7a4AxIIE0mlGMq6\nBCVrzTIWy2nKj3/8Y2666SZWrlxJZWUlGzZsYP/+/ezYsYNt27bR3t7OqlWreP/73w/AnXfeyV/+\n5V8CcNttt/Hoo4/ytre9DdDc7evXr+erX/0qt9xyCxs2bKCiooIzzzyTP/uzP6OysnLS/Sfma3/i\niSfYuXMnL730EsYY3v72t/Pss8/S2dlJQ0MDP/3pTwHo6+ujtLSUL33pS6xbt46qqqp5+T1OeXEn\nECLmpBjOugSdLN02StViObEcZYa9UDz44IN89KMfBeDWW2/lwQcfJJPJ8Pu///u4rktDQwPXXnvt\nkfbr1q3j7/7u7xgeHqa7u5vVq1cfEfe3v/3tAJx33nmsXr2a+notA71s2TKam5unFPeJPPHEEzzx\nxBNceOGFgL5Z7Ny5k6uuuoo///M/5xOf+ARvfetbueqqq+b1dxihAMQ9TNRJM5x1CJgMJpsmmckS\nCrgnumcWi+U40d3dzdNPP83mzZsREbLZLCLCO9/5zinbJxIJ/vRP/5T169fT1NTEfffddyQtMHCk\nXJ/jOEc+j3zPZPKzDhhjuPvuu/ngBz846dgrr7zCY489xqc+9Smuu+66I28Q80neC6oi4orIqyLy\nqP/930Vkr4hs9Lc1/n4Rkb8XkV0isklELpr3Xo8lECIqKYazDk4uxZJDPyO9+7kFvaXFYjm5ePjh\nh7ntttvYv38/+/bto7m5maVLl1JZWckPfvADstksbW1tR2zZI0JeVVXF4ODgvHjQTJXr/Vvf+haD\ng4MAtLa20tHRwcGDB4lGo7znPe/h4x//OK+88sqU58+V2czcPwpsB0rG7Pu4MWbir3IzsMLfLgO+\n5v9dGAIhoqIzdycTJ5AewnS8Bk3nQ7RiwW5rsVhOHh588MFJib7e9a53sX37dlasWMGqVatYvHgx\nb3jDGwAoKyvjj//4jzn33HOpq6vjkksumXMfKisrJ+Vr3759+5F7FhUV8R//8R/s2rWLj3/84ziO\ng+d5fO1rXwPgjjvu4KabbqKhoWFeFlTzyucuIo3At4H7gbuMMW8VkX8HHp0o7iLydeAZY8yD/vcd\nwNUz1VE95nzuAA9czW/a03w4dxdfuCZG7tBmVtYUUbH6OqheeWzXtFgss8Lmc194Fiqf+1eA/wtM\njO2/3ze9fFlERgxTi4DmMW1a/H0TO3WHiKwXkfWdnZ15dmMKAmFCkiGedfFSfQhCSsLQ33rs17RY\nLJZTnKOaZUTkrUCHMWaDiFw95tDdwCEgCDwAfAL4TL43NsY84J/H2rVrj70cVCBEmJQGMaX7yTgw\nSAj6D4IxME0tRIvFYjkWurq6uO666ybt/8UvfpGXF83xIh+b+xXA20XkLUAYKBGR/zDGvMc/nhSR\nfwP+wv/eCjSNOb/R37cweDHCpIhnHUw2Q0BgOCOQiUNyAMIlR7+GxWKZM8aYaQtLFxKVlZVHfNmP\nF8dSDvWoZhljzN3GmEZjzBLgVuBpY8x7RKQe1DsGeAewxT/lEeC9vtfM5UDfTPb2OROMESKJQUin\n4gQlSzydBQwMdy3YbS0WyyjhcJiurq5jEiHLzBhj6OrqIhwOz+q8ufi5f09EqgEBNgJ/4u9/DHgL\nsAsYBm6fwz2OTjBGyKhbUzI+TCzikEhlMW4Y6WuBiqULenuLxQKNjY20tLQwp/Uzy7SEw2EaGxtn\ndc6sxN0Y8wzwjP/52mnaGOBDs+rFXAjG8HJJAA5HlxEpypGLZ0kHYgR7D1i7u8VyHPA8j6VL7UTq\nZOLUzgoJECzCMymEHEPZAIiLACkTgExC7e4Wi8VymlEA4h4DIEKK4TFRwclsTmft8Z4T1DGLxWI5\ncRSMuMdIqJeMTzKd1UpNAwdPVM8sFovlhFEA4l4EQFQSDPni7joOw6kshIqgt3mmsy0Wi6UgKQBx\n15l7EQniWRV3zxXN6x4Iq809NX/VTSwWi+VUoGDEPUb8yMzdc4Sh1BgDvLW7WyyW04wCEHc1y5S7\niSMLqq7rkMzkyOZy4ASgf+FiqCwWi+VkpADEXWfuZW6cwfTogqoAyUwOQiXQs/cEdc5isVhODAUj\n7pVOnIEx4m4wJNM58MKQ7INE/4nqocVisRx3Tn1xD5cCUO4MMZAefRwBEpmReqoODBw6/n2zWCyW\nE8SpL+6hEgxCpTNI/5iZu+u4DCZ9I3yoGDq2n6AOWiwWy/Hn1Bd3xwEvQrkMMZAaFXfPlTHiXgRD\nndY0Y7FYThtOfXEHjBelRIYYzgpOvJuyzpfxHBhMZEcbiQu9B05cJy0Wi+U4MpeUvycPXpSS7CBB\n0py/4R4Akmvq6HdqSWVyBAMORMqgYxvUrrZZIi0WS8FTEDN3vCgxM8Q1zmh1lLLOlxGMukOCes0k\n+mG4+wR10mKxWI4feYu7iLgi8qqIPOp/XyoiL4rILhH5gYgE/f0h//su//iShen6GLwo0dwwN7kv\nEXeLGSpeSmxgDwYhkR5jmnE96LY+7xaLpfCZzcz9o8BYl5O/Bb5sjFkO9AAf8Pd/AOjx93/Zb7eg\nGC9KODfEYungcLCReKyJyFArjkFzzIwQKYfObZDNTH8xi8ViKQDyEncRaQT+D/Cv/ncBrgUe9pt8\nG62jCnCL/x3/+HWywFVzJRgllIuzSA7T65QTjy3CzcYpyvXRn0iPNnQ9yKRg0Pq8WyyWwibfmftX\ngP8L+AZsKoFeY8zIFLgFWOR/XgQ0A/jH+/z24xCRO0RkvYisn3PdxUgZgqFOeuiSchJR7UpJso2B\nxIRZejAG7dvmdj+LxWI5yTmquIvIW4EOY8yG+byxMeYBY8xaY8za6urqOV3LiY6OHZ2Uk4g1ABBL\ntJHKZklnc6ONw6XQd8D6vFssloImn5n7FcDbRWQf8H3UHPNVoExERlwpG4FW/3Mr0ATgHy8Fuuax\nz5OJVBz52GbKyQaipELlhIdaNQ1Beoy4i4AEoGvngnbJYrFYTiRHFXdjzN3GmEZjzBLgVuBpY8wf\nAuuA3/GbvQ/4sf/5Ef87/vGnjTFmXns9kUj5kY97cnUAJKINRIZaJ3vMAEQroW0zZJIL2i2LxWI5\nUczFz/0TwF0isgu1qX/T3/9NoNLffxfwybl1MQ9cD4AuytiWbQIgHl1EKH6IALnRNARH2gfA5OCw\nnb1bLJbCZFYRqsaYZ4Bn/M97gEunaJMAfnce+jYr1q/5LF/fW01Xr45XidgiHJOlJNVJfyI8+YRY\nJbRugMrlGuBksVgsBURhRKg6LiZYQlnYozsppHM6cwcoTrbRH5/Cr90NQi4LHVuPc2ctFotl4SkM\ncXeDOGKoiWQxCJ0Jh2S0lpy4xIZbyORypDK5yecVVcPBjdZzxmKxFBwFIu4ejmSpDqmAt8cF43jE\nixYTG9iDAPGJi6qg9VUdDw6+cnz7a7FYLAtMYYi74+Ei1ERUwNvj+lhDxWcSHdgHuTTx1DQpB2KV\nurA60H6cOmuxWCwLT2GIu+sRkBylXg7PMRzyxX2g7Cwck6F68HX6J0aqjiAOhEtg/wtqg7dYLJYC\noGDE3fOfpDqco+OIuK8iE4jRcPgF+oZT058fKoHhLujccRw6a7FYLAtPwYh7yIVszlAXMUfMMjgu\nHYtuoLx3C7FDL5HNzRBLVVQDzS/axVWLxVIQFIi4Bwk6kDWGmkhuVNyBjsYbGCpeyormh0j2dcx4\nDRwPDvwKFjig1mKxWBaawhB3Z8QsY6iL5BjMCEMjJnZx2b/ydsRkcV/99gwXQRdXe/ZD1+4F7rDF\nYrEsLIUh7m4IV3IIQk14xB1y9NFSkRoO1N1IqP0VaD9K0FJRLex7DhJ9C9lji8ViWVAKQ9wDQQKi\nppTaiIp758D4BdTORdeRDFXAK9+F3BQBTWOuhRuEPc9ANj19O4vFYjmJKQxxd1wcR4s9jYh712Bi\nXBPPC7G74e3Quw/2PTvz9aIVMHgYWtYvRG8tFotlwSkYcQ+IYIBiJ0UskKM1FQMz6rfuOEJ72Rqy\nFcvhN9+HdGL66wGU1MGhTdC1Z2H7brFYLAtAgYh7AHH0UQKZIWqiwqFUGGeiWUUcBlf9ASR6YdP3\nZ76mOGp/3/sMDHcvTL8tFotlgSgYcXcFwCDZJFVFIQ4lgzi58cU4HKA3dgasvAle/5luMxEIQSAC\nu39hC3tYLJZTinxqqIZF5CUR+Y2IbBWRT/v7/11E9orIRn9b4+8XEfl7EdklIptE5KKFfgjNCik4\n/uNUF4fpiAtkxy+qBgMOvcNpuPC9sGgtbPh32P30zNeOlEFyEPa9MPNCrMVisZxE5DNzTwLXGmMu\nANYAN4nI5f6xjxtj1vjbRn/fzcAKf7sD+Np8d3oSTgAwBFzB5AyVJVHSOehNyrhmwYBD33AaIwJX\nfATq18BLDxxd4ItqoXsXHNq8cM9gsVgs80g+NVSNMWbQ/+r520whnLcA3/HP+zVaSLt+7l2dATcI\nCK4YsuJQWVwEwMGEN76Z45A1hkQmp+dcdRfUX6ACv+up6a8vAsX1mp6ge9/CPYfFYrHME3nZ3EXE\nFZGNQAfwpDHmRf/Q/b7p5csiEvL3LQKax5ze4u+beM07RGS9iKzv7OycwyPg11A1hEyKpFtCXVkE\ngOZ4cMrmwynfi8YNwlV/Dg0Xwsv/CjufmP4eTkDzz+x+yqYHtlgsJz15ibsxJmuMWQM0ApeKyLnA\n3cDZwCVABVowO2+MMQ8YY9YaY9ZWV1fPstsTcFwQlxApEsFyKmNBwp7DvqHQ5KYIA/ExXjRuEK68\nCxougvXfgtd/Pv19AiEIl+tCrPWgsVgsJzGz8pYxxvQC64CbjDFtvuklCfwbo8WyW4GmMac1+vsW\nFi9CMBcn4ZUiIiwqi7B3ODwpR3vIc+iJT0j/63pw5Z/5i6z/Bjsem/4+wSgEwrDjcZtB0mKxnLTk\n4y1TLSJl/ucIcAPw2ogdXUQEeAewxT/lEeC9vtfM5UCfMaZtQXo/Fi9CQNKkAmpvX1QWYf9wEHeC\nO2TIdegfTpObmP7X9eCKj0HjJfDKd+C1n05/r3CJ2uF3PK6eNBaLxXKSkc/MvR5YJyKbgJdRm/uj\nwPdEZDOwGagCPuu3fwzYA+wCvgH86bz3eiqCMTyBlIQBqCsNM5BxGEiMD2QSR8gB8cwUVZfcAFzx\nUWi6DF79Lmz90fT3i5RDLm0F3mKxnJQEjtbAGLMJuHCK/ddO094AH5p712ZJSQOOFyHl6GJqXYmK\nfOugYUXRhLYGhpNZYsEpHt8JwBs/Ai9+DTb9ADIJOP9WnalPJFqpFZx2PKaBUeGSeX4oi8ViOTYK\nI0IVVGhjlaRFPWTqS1XkW+OTF1UDjtAfnyHjo+PC5X8Ky6+HbT+Grf89832zadj+E7vIarFYThoK\nR9wjFZiGi8FP/VsZCxJwhOa4N6lpKODSPVNNVdDcMmvfD0vfBJv/a+ZF1miFzvi3PwL9B+fyFBaL\nxTIvFI64uwGkYgmCmk8cR6gtCdOciCC58bN0LyAMJTNkjpZOQBy49IPQeKkusu55Zvq24RIIFetC\nbOcOW6rPYrGcUApH3AHPHf84daVhmhNhAqmBcfvFTw98JJhpJhwX3vhhqDsfXvwX2PJDMNMMCl5U\nA532PAP7X7DFPiwWywmjsMTdcWDMumd9SZj2uJDJZggNtxMeOjhuFj+YzExxlSlwPbjqL2DJVWqi\nee5LkB6epm0QShuh83WdxVtfeIvFcgIoLHEPyLisN7WlYXIGtpS/mbYl76C79g2E4h1gsgRdP0Nk\nvgSCush60fvg4Cvw809B/zSxWeJAST2khtSdsrd56nYWi8WyQBSUuAccZ1xGs/oRd8hhIReIMFxy\nJn0VFxAePkTYMfQOHWVRdSIicNbNcO2nIDWoAt/y8vTtoxVqh9/xuJbsy+b5pmCxWCxzpKDE3dOK\nHRh/MbOuVMX9UN9oSb2BivPorbyISLobd+gQyZ5WSPbPbgG0ZhXc+P90dv7cF+FX/zR9IJMXgZIG\naNuos/iuPWqqsbnhLRbLAnLUIKZTCREh6Gpa34AIYc+lLOLRNkbcEWGwYjXDJUvp6e5kWW2E6mSz\nmlgCYfVbnypgaSKxKrj+0yrY236s9VYv+H1Y8iZwJoyZjgsli9RMs+dpQEBcKGuCimV6z1Bxfve1\nWCyWPCgocQcoiQRIZXIEgiqw9aVh2vrik9rlAlGSkVo6QmVULz0P4j3Q+ip074ZgEYRLjy62rgfn\n/x40XQovf0O9aV77Kaz5Ay0EMvH8YEw30Jn7YAd079V2rgdli6HsDE1tkM/9LRaLZRoKTtyrikLs\n6Rwi6qdyX1Qe4dmdh8kZgzNBLKPBAG29cVY3lKqgLr8WBlbDwVf9xVKBWLXmnJmJ8iVww2e1mMdv\nHoT//VuoPltn8tVnTX2O42gJv0iZfs9moK8VunbpfQNhqDoLKpbk/zZhsVgsPgUn7uVRj3R21H+9\noSxCKpOjazBFdfH4VARRz6VjIEkuZ3AcXzyLa+GsmyA1DIdf1wXTcBmEJiaomYAILL5c0wbveVrN\nNU/9FSy5Ei74A11cnQk3ML5NNgUdW9RWHypSO39po/ZlotnHYrFYJlBw4l4U9jBjnN0X+VWZWnvj\nk8TdcYScgYFEhtLohDQFwSg0rFFb+es/A5NVU8nRcAOw4s2atmDbjzXnTMvLsOqd0HixukkO98CR\nwKoxM3Jx1DwTCOubRFGtDhqZBLRugOaX9XjFUt2Kav0qVBaLxTKeghP3sOcy1tl9rLivaSqb1N4A\n/Yn0ZHEfoagaznkrvPaYZoCMVubXkUAYzn83LP0tTR+86fu6zYZQic7YGy/RgSEQhlwGevdrigPH\n1QXZyuW+0Bfcf06LxXKMFJwahD2HsbPhsOdSVRSktWfyoipA0BE6BpI0VUSnv2ikHM55G+z9X+hr\nUdHNN71vcR286eN6Xs8+v1NlEPHfAo6MQ0bdMbMpSMdhqEOjXA9tguZfq5DHqqF0MSy6CBa/Uff1\ntcDhnRpkVX32qPeNtdFbLKc1RxV3EQkDzwIhv/3Dxpi/EpGlwPeBSmADcJsxJuUXyv4OcDHQBbzb\nGLNvgfo/iaDr4IqMs6M3lEVo7Z1a3GOhAIf64kD5zBcOl8DZb4WBNjWz9DWriHozDApjKW3UbTYs\nv17z2HTu0EXegUPQswdaXtK3gWVXw/IboHSRLsh2bIe2zTpw1J6r3jfBPPtnsVgKinxm7kngWmPM\noIh4wPMi8jhwF/BlY8z3ReRfgA8AX/P/9hhjlovIrcDfAu9eoP5PQkQoDgdIZXOEHRdQ08zWg/1k\ncjkCExYjQwGHjoEk6WxuUuKxKS6uAUlnvw169kPLizDcorb4UPH8Pogxej9xoOYc3Ub2d2yDnU/C\njp+p62XdBbDiBi3y7Tia92b/C7qVnQE1Z0NRnTXbWCynEflUYjLASPil528GuBb4A3//t4H7UHG/\nxf8M8DDwjyIixhy/HLjF4QDdQynf/q7ins0ZOvqTNPg2+BG0BKyhP56msmhyYY8pcRyoXKpBSH3N\ncGiLujEi6tkSKlJRzpdcRiNc03FG7TSis3bH0b/hcgiEdGG3ZhXUrtbiIHvWwa6n4LkvQLQKll8H\ny67RQcjk1LyzY5+abSpX6EJstMoKvcVS4OT1L1xEXNT0shz4J2A30GuMGUmW0gIs8j8vApoBjDEZ\nEelDTTeHJ1zzDuAOgMWLF8/tKSZQFgtysDdBcdjv0JhF1Ynirv0U+mYj7iO4gVHPlUS/mk2690B/\nG5ADHIhVaKbIiaTjkOjzBTwApU3qmRMpUxOQF4FcVnPYDHRA+xaId4ET1H0j0bTnvgtW3QKtr8DO\nJ7Q04OaH1dNn6Zt0Nh8pV7NN105o36b9Ll+iW6Rcg7ase6XFUlDkJe7GmCywRkTKgB8BZ8/1xsaY\nB4AHANauXTuvs/qKaJDsmHLsgF4AACAASURBVBeFutIwjkBLT5xLlkxuH/Ic2geSLKs+ii/7TIT9\nRdbqlSrKyX7obdEMkrmsiqgbgOSApiEIl8Gii9XLJVo59UzacdXkEy6F6hWj++M9moisZ58OHNEq\njZJtulQrQe1+Wk0yrRvAi0H9BboIW7MKSqp09t/X4gdMoW8ZXlQHmUjZaIRsuFQHmXRidEAJFVs7\nvsVyCjCrd3NjTK+IrAPeAJSJSMCfvTcCI/lvW4EmoEVEAkApurB63IgG3XHfPdehoSzCvsNDU7f3\nXNrH5p+ZK46rAhkph6oV0LVb7eSpQZ2d15wNxfXH7tESKVcbe7xHF1E7tqswRyvVHHPhezQ6tn0L\n7P8lHNwIB36p54bL1KOmYpm2DYTA8bSwSC6tbxS5rAp5uFiFfaANskkdiMqXqLdQtEqFPlqhW6Tc\n+txbLCcR+XjLVANpX9gjwA3oIuk64HdQj5n3AT/2T3nE//4r//jTx9PeDuoBw4Q7LquKsX5/z5Rp\nCEKeS09/nGQmSygwfmCYM14Y6lbrNt9EyuGMN6r9vX2bDiDiqNi6QZ2x11+gpp/uvWqW6dqj+XMO\nvsqkHykfnIAOWFVn6UJupEyvI44u3laeOepFZE09FssJI5+Zez3wbd/u7gAPGWMeFZFtwPdF5LPA\nq8A3/fbfBL4rIruAbuDWBej3jIQCjh99OirkS6tiPLvzMB39ySOpgMcj9MczVBfPs7gfD8KlcMYb\noP589Xk/tBkySU1SFi5R4a08U7cR0nENysok1bdeHBVux1WPnOSArgl4EU1tHIhC7z59Gzi0Bbb9\nj0bgNq6Fc94OFWfCoO+qie/lEyxS8Y9W6hYu1Vm/FX2LZcHJx1tmE3DhFPv3AJdOsT8B/O689O4Y\nERFiIZd0JkfI95hZVqX29D2HB6cUd0GLd0xMUXBKEYzpQmrtuZr47PDr6s2Ty6nJxAvrgqzrqWiP\n+N2bnKY4SA2r544xapaJVenxkRQIsVo4sxbOvE5NNwd+BTt/rn7/Nau0DGHFstHMl+khSPTqgOO4\n/uARUJNU6SI1EYVLj563x2KxzJqC9YcrDnv0D6cJ+Wbg+tIwoYDD3sNDvPHMqkntw16AQwMJVtTN\ns7/6icANQPkZumWSMHQYBtv1b2pQvW6yGTSS12hu+UiZmltCxSr8blBFX1wV32Cx2uSHu/Ua7Vth\nyRUa2LVnHbz+OLz09en75Hgq6FUr1aRTfobO7o3x732WHo+U2+hai2UeKFhxLwkHODyQPPLdcYQl\nlTH2TreoGpznRdWThUBIRbN00eg+Y1T0cxmdxbvB/ATVCamJBqB8qaZFaN+mi7tnvQV6D+jia3pY\nBwZj/L9ZHRR69sGeZ9RlM1KhJQuXXw8YaF0PzS/pIm7NKhX/+Q4Ms1hOIwpY3D3S2fGl7JoqIjz7\n+uHxKX59PNchkc4xnMoQDRbsz6KIqIlmLrgBOOMKzXez/wVwQ6NvC2PJZdQTxxg1yQjQtkkzbW78\nntruV9wIK2/S9YF0QkW++UU131Qs1RiAmUw3uZw+kzGjA5ad/VtOcwpWxYojgUm+IE3lUVLZHB0D\n0yyqiqE/fhqI+3whosVIimrV5bKvdVRUR8TWDerCaiCo/v2pARXtK/9Mg762/Q9s/W947ScaWXv2\n/9G3A2PU/HPgV2B+qedUrtBjXsRfON4EmfgYExOA0YGmrElz60TK/EXcU3Ch3GKZAwWrYiXhyT7X\nTeUafNPcMzyluDsidA1N501jmZZImZpYhrs1eMtxVdCDMTULjSUd1wjelpf0+JV3wcBB2P6oBl/t\nekozXp51s4pzqNgX+gHY+6yv4aKmnmgVRKL6ZjB8WAeL1JAu0mYS6vo5UgO+yM+oWVznB2fZ/8aW\nwqZgxT0adAm6DplsjoCfEKy+TCNVm3uGuWTJ5MpIUW9M2T3L7BCBWKVuM+FFoHKZrgHse14DvIrr\n4bIPwnm/Czt+qgK//3ltX7LIz2e/Vs0zgRAMdsLe5zXCtveABnNN1Z/ypWq/X36Div3BV3QNANSc\nVH22egzZiFtLAVKw4i4iVMQ8BpNZinxx91yHutIwLd1Tp/+NBqcou2dZGAIhNcPEanQxFdT18sLb\ntGrVwVc16VnHNtj+YzXfgLpPJnpVvEsXQ915UNyg58aqdVY+2AGHd2jk7uuPw47HdWAoXaSJ1arO\nhsww7H1O3wTKzlDzUnGdjbK1FAwFK+4AZdEg3UNDmonep6k8ys72wSnbz1h2zzL/OA7Un6cz+fZt\ncOg36nIZLoGlV/mN3qWmnvatas4ZPKQ2/iVXQVHN+OsZozb4YFRTPJz3u+r+ufMJneEf2qSLvzWr\n4YJb1fVzJHNmzz4/EdwyDcgqqrFCbzmlKWhxL53CY6axPMKLe7sZTGYoCk1+fAP0xWcou2eZf4Ix\naLpEhXX309B3UG3kI+IaKoHFb5j63PSwZuQcMbdEKnQb7FBTjDGw6h0q+JkU7P6FFi9/8l4V92XX\nQNPlUFqugVm9BzT4S1x9qyg7Q4umjyR+s1hOEQr6/9ZYOMDErDYji6otPcOcXTe5VF7IdegYSLC4\n0tphjzuxSlj9Dp3Ft/1Gg6YAMH5a4oAGQ2USunBqchAth4YLdTYfKR9dKDVGZ/yJPtj1NCT7NGhq\n2dW67X5at5cegJf/VYW+7ny10VeeCRLQgaP1ZXW1dBz11in301OHy/IvtWixnAAKWtwjnjvJ3bmx\nXPO5t/TEpxT3aNCltTfO2uPRQctkXA8aLoC6czXQCtTFsnf/qKiHyzRPfUnd9IFOIqNpi1ffAr2t\nQE7z7hijLpdnvUUXZVvX6/7N/6XnOp7660crNciq7jyd1ffsVVs+6DWKav1F2YbRlAsWy0lCYYt7\n0J00cy+NeBSHA7RMUzA77Lm09cVJpLNHKjlZTgCOO+rFUr1ifD772TKSfhl0Vv76z9VtsqjGz3C5\nQlMkJwe0Xm3HdrXBd+7QYKpFF8OaP9QUySOM+OGPuGcGwrpIXFyvHjjhUhV81xud+Vssx5GCFvdQ\nwCHgCtmcwfW9X0SExvIIzT3D054nopWZrLgXIMGYztibX9JZuBNQG30gqG8BjWt1A82WueNxtdE/\n9nGdwWfimmCt4UJd9C1ZpOaebFp973v2QudrjObt8cskukEV/pL60WIodrZvWUAKWtxFhNKIRyqT\nIzKmgEdTeZSnX+sYJ/rjzgMODyapLbGBLgWJF4Zlb9IUyd17dKY+PCavUCDs2+5FE6Mt/S1Nb9y+\nVfdHyjSidvsjKtDly1TEcxl924hW6ptHzs+2mR7yo2YXa6FzLwoYCETUfbN0kR9YFbWJ0yzzRkGL\nO0BZ1KO1Jz5O3BvLI2Ryhvb+xJQ1VYtCAZq7bTBTwRMp0/KDDRf65Q8HITGgrpFDfsnfgYMquBe/\nb/y5w11qpz/8uq4HICro/W2a7x4/o6br6QCQGoJ9z+m+RRepK2eoRCN2+1r8i/oLxzXnqPlo4sw+\nHVdzkA26suRBPpWYmoDvALWop+ADxpivish9wB8DnX7Te4wxj/nn3A18AMgCHzHG/HwB+p4XFbEQ\nezrHZ4Ic9ZiZumB2JOjSOZAknc3hudZWWvCIjNbALQE4a/RYf5t61eT6dHY9QrRy1PMmX3r2q8Dv\n+V/NgQ86IJxxhdr0R9ImtKz3c+Sfowu24VLNpXPglyruoRINuippUJOStedbpiCfmXsG+HNjzCsi\nUgxsEJEn/WNfNsZ8YWxjEVmFVl9aDTQAT4nISr/I9nGnODw5gVh9aRjXEZp7hrl06eQ0BI7IEX/3\nqqJTuHiHZe6U1Guem+2PqtCPYHKaqXIk930uo7Z442eozGW17uzYFX3HgxVvhnN/R4uopAbV5XPX\nU1rndu37oekyvWcup4Levl3thLnsaARtOqHFz5tf1kXc6rOhYokVess48qnE1Aa0+Z8HRGQ7sGiG\nU24Bvm+MSQJ7/XJ7l6I1VY87sWCAibVCA65DfWn4KIuq0DWYsuJu0Zq0q9+hM28RXRhND0HHaxDv\nVhOOE9CZ9IjQe1G/ylSxmn8CYb/IyTbdiutVmGtWa0qEX38NXvgKNF4Ka29XU9DECFzQwcMLg1en\n37Mp6Niig4Qb0GRq5WeMeuwk+zXqd6zoG6O1dHMZ9dv3Jr+9Wk59ZmVzF5ElaMm9F4ErgDtF5L3A\nenR234MK/6/HnNbCzIPBghINuYBgjEHGLFQ1lkd4rW1g+vM8l5aeYc4qhMpMlrkTLtFUCUeo1AVS\n0JTD4hx91hwp1+pVlcs1DUJqJA2GwHV/pS6am/8LfrJRZ/jnvF3vG++Fjf+pic/SQ2oSitXqDL9q\npRZIL6rV2X56WE06B34FXkzbByLapmKJ9qGvBXY/qSUX9z+vA5Ib1EEsVAQ4OmhkkjqYhUqhuEbv\naz18ThnyFncRKQJ+CHzMGNMvIl8D/hqdFv818EXg/bO43h3AHQCLFy+eTZ9nhec6xEIB0llDMDAq\n7k3lUX69p5uBRJriKdIDx4IB2vsT03rUWCxHmG1aguJaOPe39XMuqwuzzS/COW+Fpkthy8OaHXPn\nzyFcrou3InDGlRAphaEuGGrXHPq7ntLrVC6HojrNY7/8Bj/dQlLb5zLQtlGDtaJVGrUbrdY2xqgL\nZy6nKZsH2/3CKq4u/mK0Hu+h3+h9gjE1DxU36JuKrX970pLX/5Ui4qHC/j1jzH8DGGPaxxz/BvCo\n/7UVaBpzeqO/bxzGmAeABwDWrl070Sw+r1REPbqHUgQDozOrsZGq59RPFnfH0dl+73CKSmuasSwU\njqtFzVODGjRV0gBvuBNWvxN2PqVCfMYbYembxgdRgZpoepvV/n7oN+q3v/952P4TWPZbGskL6plT\n7JtxUsNaynCgXWfi4RKdniX7ddYf71VvocFO32uoA3B00Gi6HCKVuvbQtUfvX7kMqs/RNwdr7z+p\nyMdbRoBvAtuNMV8as7/et8cDvBPY4n9+BPhPEfkSuqC6AnhpXns9SypiIQ72Jige47Y+tnDHOfXT\n5wjpGrTibjkONF6qwtp/0A92WjTZ/XIi4oyWNhx5E+jeA1v/R4OvRpKpbX5Y3T3PeIPmx3nuC9pO\nHF0PiPcwKZRbXD+Ncg2QUzPP7qf1/IveO5pRc0ToQ0XQcLGafmw2zZOCfGbuVwC3AZtFZKO/7x7g\n90VkDTru7wM+CGCM2SoiDwHbUE+bD50oT5kRyqIe2dz4/3lL/DQEB3unL4odDQZo7hlmpbW7Wxaa\nQFC9cvY8A9371J4+MZgpm9aZfDal/+r8IFgCQRVpcaF8CVx1l5pY4j1qetn+E82P3+wvhblBuPiP\n9FpDXX6RlWp/EbhEBX2i5002pcVVNv+XZtRc+luasiHqe5ulh2Hf/+o96s7XhdqRlA+WE0I+3jLP\nM1qgciyPzXDO/cD9c+jXvFIUCkz5BIvKIrTM4DETC6ndfWw1J4tlwXBcNb84Aeh8XWfD4RJIDqrZ\nJBDSBdRolQqvuGovHzikwVS5rIq9F1bRHRHeS+9Qm3rLS+qCecYVk008U5FJ6L2zKf2+aK2WQNz6\n37om0PKSLvquvFkHBs9Pq3zwFT1WXK8LucV1J9YjZ7hbB8ZoxWn1VlHwEaoARWF9zKk8Zp7deZic\nMThThHw7IuRy0D2coqbYpiKwHAdcT+3lNas0mGmgTWfxiy9TU81U4lSxTM06GI1i3fUL9YiJVqlA\ne1Gd3S++HLh8+nvnclqrNuUH/YWK1fwSq1azTcc2XXA9/1YN3tr4Pdj0A13UXft+zdQZCKqYj9S9\n3f0LvVasdrTaVbBIB6XkgM74AxEdyBxv/u32h7Zq8Jc4usWq9blK/QLq0y2GG+MvLDv6u4jMX1qI\nlvX6G9efv6BvN6eFuI94zKSyOUKB0TQEi8oipDI5Dg8mpxVvEegcmP64xbIgFFXD2TerwOQjKiMi\n5Xqw6hZNXnZok4pZX4uKqRdV8w3oIJAa8v3vh/S4uDqjb7hYPXom5quvWKbC1Paq+tG/6eO6CPzS\nN+DZz6vP/tlv0beLULFG0oZKfKEfUrPOpJBCGJdkrbRJB4Fwqb69pId0TSFS4bthinr/uN7Rf5e+\nVjjwAhTV6++Ty2nit2S/vumES7UITGmjXqt7nyZ+E0dNWvEercPbd0DfPOov1L7MdvY/Nitook9N\nZIGw9mHkuc66aXbXzIPTQtwBqmJBOgeS48Xd95hp7YlPK97F4QD7Dg/ZPDOWE8OxzBYdB2pX6QZa\nqar/oC6i9rWM+q5XLlcBq1qpAhcpU9PQTNdtukQHgvYt+iZRfRbc9DnY/RRs/qGKPKjdvvosnfkX\n1/tbnd7bGH0D6Nmn93e90Vn9UKfuF1GRdYPQtRNwOJK/J5dWcRxJrxwp82MGZDTbZrwHXntcZ+0j\nqR7OuFLdTYMxnTGnBnXhORjTgW+oY7Q+gOPpwNjfqvtyOdizTk1jDRfpQDeS4yfhF4UB9UJK9vmD\nWk7NYMkBf5G8Qds5AV2sNjk1qbnB2f83zoPTRtzLosFJOdwbSn13yN44Fy6e+vUo4rm09yeJp7Lj\nko9ZLKcMI3lzqs9Sn3kveuzJx0TUFz81qCIcrdDrrbxJSxZ27YKu3dC9C9o2aS6dEUbq48Z7dUY+\n7rqOvnGseufo28Vwtx8R3OAPCjk9N5ceFcaefYDR70Z0ADI5HXx2PKaDSO25OqBs+j4c3AC/9UkV\n9GCRbtm0XrO0afJgGh2TnmSkVGPzS7pwHCz2g8KaR9s4ARXr/oOj5xTVqOC3tunAWFw/+szhEj1n\nATiNxN0jkxtfTzXsuVQXhWidpnAHaNpgg+HwYJKmCpuNz3IKI6IzxrniuHDmddC9V8sQxtt01h0I\n6QJq7WptZ4ymZxg4NPrmkI5rQrTypVCxVPuTTmjg1tYfwetP6OAxcAg6t+t1AiGNtsXojHyEQFjT\nJWczWvvWC+s6Q2pQ2xXXw9V3Q/0F2n7/L+HX/wTr7odr/r/RaFvXG29qMQa6d+ssO9GnaSbqzoUl\nV+qaQokvzpmkPl9R7fg3nkxKBb97t+YMAk0x0XCRrlu8+h/q1bT8Bm1XMjYsaP4QM9G/9QSwdu1a\ns379+gW9x+HBJD/bcoi6CTna/3HdLtr7E/z1LedOe27PcIpFZRHeuHwe/mFYLIVENq3VqLp2q5jO\nNlrX5FQMBR0sdj2pZpRwmQ4gXkSFfqTYeUmDzqaTAzor7z2gM9+KpTpwDHfrm0TtKhXjibPi1g3w\n/JegbAlc/Qk1n4CuCex8QtM3H94Fw4dHzwmE9f6VZ8LF79e/R/pvNHisa7e+RfTsVVPOiK6OxAkM\nHdYF3P5Wvw5wkiPrD8uvh/f8cHa/m4+IbDDGTFkV9LSZuZf4KQYmecyURdjU0jtjet/icIAD3cNc\nZlMRWCzjcT31nInVaAqFQEhntwY/Z03Ad9H0q1GJqAgnB/wgK0dTJCQG1H7+xo/kv4g8kVxGxTyX\nVS+cRL+aW7IZQNQkUrMKrrwLnv8y/PTj2vdsSs0s8R6dhVcshfN+VwcRcfRNY/8vdcb9xKc0YjhW\npc/R8ZouuIKaaMqXqudS+RIV86Jave+On8GW/1I7/jWf0n17n9Xf4Oxb5ue/xQROG3EPBhyqikIM\np7LEQqOP3VAWIWegrS/B4mnMLgHHIZMzdA+lqC620aoWyzgcV5OqlTVqoZJ0XEUx2Q/xPhV8JwDx\nLshmVTQXXawz/WiFnj/YCdt+pG3HLjBmM34K5bSabzIJf1AYK/7+DNj19E3CCaiohkrU9BKtULv3\nYLuKbP0aePP9sP6bWk3LDWja5Kv+YvysfCxLrtQiK5sf1kCzbFJn9EW1cNmf6DVH1gom4epC7rKr\n9dkC/vOd97tqQvIWxhPvtBF3gMUVEV490DtO3BdXqqDv7xqaVtwBXBEO9g5bcbdYpiNSrnVlZ2K6\nWXlRtS7I7nvBn4G7OgMPhPTvyMJkrGY0KEocFfts2i9TGNa24kx9j7LFan/v2K4ujTd8xs+/n6dv\nvRfV1AsXvffobbMpP5o4rd/H5uM/TpxW4l4RC03ysq0pDhHxXPZ1DXPViunPLYkE2H14iPMby8aZ\ndSwWyyyY6d9O1QoV4J79apMuXXT0mrITvX5mcuUEXext36Ji67jTC7sx6tFjcmoyAt8zaIZI20wC\nhnuAnAZmVa1UM02sSs03+19Q05Mxvjvnwk4UTytxL414k2IoHBHOqIyyr2to6pN8QgGX7qEUvcNp\nymML45dqsZz2BEJQvXLhrh8q0tw37VtGM2WOJZdR23smqW8JgZAGdTmub45JjS+3mMuqe2k2rddu\nvEQzaIZLxw9Ktatg8JAGSon4fvWH1fZeVb0gj3paiXsk6BL2nEmLp0sqYzy5vf2oNVMDrnCwL27F\n3WI5lak7VyN408MqsqC2/eFOQPzgq5WT3UbDpX5qh1bfbJTTv9Ur/Zw/ldO/ZYjAmdfCkvSoB89w\nlw4WU1XcmgdOK3EHqCwK0TucGifiS6tiZHOG5p5hllVNX3ygOOSxs32QVfUl1jRjsZyqeBH1O9/x\nuJ8YLaPBTw0XqbBPZ3qJVsCqt6urpDG6ThApH10gPRoi49sWLcyMfYTTTtyrikIc6huf232Jv6i6\n7/DM4h72XNr64tY0Y7Gc6pQ0aERs9x6tdlXWmF/mykAI6lYvfP/mgdMuj+1Uud0rYkHKox67Ogan\nOWsU1xEOdM9sn7dYLKcAsSqNhq1eUZBFwk87cS8JeyDjxV1EWFFTzOvtAxwtYrc8GuT19kFyuRMf\n2WuxWCzTcVRxF5EmEVknIttEZKuIfNTfXyEiT4rITv9vub9fROTvRWSXiGwSkYsW+iFmQ1E4gCDk\nJoj4itoieuNpOgeTM57vuQ6JdPao7SwWi+VEks/MPQP8uTFmFZrp/0Misgr4JPALY8wK4Bf+d4Cb\n0bqpK4A7gK/Ne6/ngOsIlUVBEunxlf9W1mqqz9fbj26aCXsuO9sHFqR/FovFMh8cVdyNMW3GmFf8\nzwPAdmARcAvwbb/Zt4F3+J9vAb5jlF8DZSJSP+89nwNVRSES6fEZIutLwxSFAnmJdmnYY3/XMPHU\nCS0Na7FYLNMyK5u7iCwBLgReBGqNMW3+oUNArf95ETAmwTEt/r6J17pDRNaLyPrOzs5ZdntuVMSC\npLLjhdkRYUVNEa/nsajq+MnDmrunr79qsVgsJ5K8xV1EioAfAh8zxvSPPWZ0FXJWK4zGmAeMMWuN\nMWurqxfW33MiRSG1u09kRW0RnQNJeoZTR71GacRjS1ufXVi1WCwnJXmJu4h4qLB/zxjz3/7u9hFz\ni/+3w9/fCozNPt/o7ztpiIYCU45EK2vU7r4zT7v7UCJD+0BinntnsVgscycfbxkBvglsN8Z8acyh\nR4D3+Z/fB/x4zP73+l4zlwN9Y8w3JwVRz9UsohM8ZpoqooQCDq/nuVgaCwbY0tq3EF20WCyWOZFP\nhOoVwG3AZhHxa0ZxD/A54CER+QCwH/g9/9hjwFuAXcAwcPu89ngecByhNOyRyuQIe6NZ5FxHWF5T\nlLe4F4cDtPUl6BpMUllkUwFbLJaTh6OKuzHmeZjCQK1cN0V7A3xojv1acEqjHh39yXHiDrC6oYSH\n1rfQ3p+gtmTmJPoiQsRz2dTSxzVnL0zyH4vFYjkWTrsI1REqY0GSmcmujBcvLgdg/f6eScemoizi\ncaB7mO6hoy/CWiwWy/HitBX3kojHVI4ulUUhllXFWL+vO6/riAjRoMtvmnvnuYcWi8Vy7Jy24h4L\nTm+RWruknOaeOO39+XnClEU8mnuG6bCeMxaL5STh9BX30AzifkYFkL9pRkSIBQO8sr/H+r1bLJaT\ngtNW3IMBh3BAqzJNpCIW5Mzq/E0zoEFN7f1JWnps1KrFYjnxnLbiDuoxk8pMFnfQ2XtzT5xDeZpm\nQBdpX9rbPeVCrcVisRxPTmtxL4t6pKaYuQNcfIbvNTOL2XvYc0lkczawyWKxnHBOb3EPB0lOM3M/\nYprJ0+4+Qk0sxJbWfjoHbL53i8Vy4jitxT0aDkwbnQVw2dJKWnri7Ducf1m9kejXF3YdntbkY7FY\nLAvNaS3uEc9lpmSWly+rIBhweOb12aUkLgoHGExleOVA/iYdi8VimU9Oa3GPBl2MmX7uHg0GuHxp\nBS/u7WIwmZnVtWuKQuw4NMCezqNnmLRYLJb55rQW91DAIeAK2Rl80689u4Z01rBuR8e0babCEaG6\nKMwLuw7TZeutWiyW48xpLe4iQmlkendIgMbyKBc0lvLUtvZJdVePRjDgUBz2ePq1DgYS6bl212Kx\nWPLmtBZ3UHfIo/mlv+W8eoZSWZ5+bXazd9CqTwBPv9Zha65aLJbjxmkv7uXR6d0hRzizuog1jWU8\ntqWN/vjsZ+Dl0SCJdJZfvDb72b/FYrEcC/lUYvqWiHSIyJYx++4TkVYR2ehvbxlz7G4R2SUiO0Tk\nxoXq+HxRFJ665N5E3nXxIlKZHP/96rFVDKyMhRhKZnhqWztDs1yctVgsltmSz8z934Gbptj/ZWPM\nGn97DEBEVgG3Aqv9c/5ZRNwpzj1piM6QHXIs9aUR3ryqjud3HT7mCNTKWIh4OsvPtx6iN48i3BaL\nxXKsHFXcjTHPAvk6bN8CfN8YkzTG7EVL7V06h/4tONFg/mPPLWsaaCgN8+1f7WM4dWyz7/JoEAw8\ntrmN5m6bZMxisSwMc7G53ykim3yzTbm/bxHQPKZNi79vEiJyh4isF5H1nZ2zCxKaT0IBB88VMrmj\nR5N6rsP7r1hKXzzNN5/fe8zpfUsiHiVhj6dfa2fD/u4pM1NaLBbLXDhWcf8acCawBmgDvjjbCxhj\nHjDGrDXGrK2urj7GbswdEaEiFiSRzk9gl1TFuPWSxfympY8fvtpyzPcNey71JRG2tQ3wsy2HOGx9\n4S0WyzxyTOJujGk3xmSNMTngG4yaXlqBpjFNG/19JzVVRSGSs/BiufbsGq45q5qfb23np5vb0Jrg\ns8dxhPqSMJlsjsc2AN5z0wAADK9JREFUtbF+X7f1prFYLPPCMYm7iNSP+fpOYMST5hHgVhEJichS\nYAXw0ty6uPBUxIKk8zDLjOXWSxZz+bIKfvRqK9978UBeZp3pKA571JWEeb19gB+92sr2tj6bdMxi\nscyJo7qKiMiDwNVAlYi0AH8FXC0ia9CsW/uADwIYY7aKyEPANiADfMgYc9JPRYvD3ozZIafCdYT3\nX7GUskiQn209RPtAgjuuWkZx2DumPjiOUFMcJp3NsX5fD5ta+jhvUSlLq4qIzGLR12KxWADkWE0K\n88natWvN+vXrT9j909kcP3i5mdriECKzlXl4Yddhvvvr/USCLu+9/AwuXFx+9JPy6FPXkLpLLq2K\nsqKmmKqiEI4z+/5ZLJbCREQ2GGPWTnUsPyfvAsdzHcoiHslMjrA3+1nyFcurWFwZ5VvP7+WfntnN\n6voS3nVxI4sronPqU11JmFzO0NqTYE/nMBHP4cyaIhrLo1TEgrhW6C0WyzTYmbvP+n3d7O4YpLIo\ndMzXyGRzPL2jg0c3tTGcynJOXTHXnl3D+Y1l8yLE6WyO3uE0WWMIOMKi8ghN5RHKYyGKQwE7q7dY\nTjPszD0PakvCbG8bmNM1Aq7Dm1fVccWZVTy7s5N1r3XyT8/spigUYE1TGRc0lrK8puiY7fKe61Bd\nrINPJpejvS+hVaJECDpCdUmYupIQZdEgReEAsWDAzu4tltMUK+4+pVEPZH7eYmKhADefW8+bV9Wx\nqaWX9ft72LC/h+d3HQagrjTMsqoYDaUR6svCNJRGZm1mCTgOZdEgZf73TC5H33CKtt74uFw5JZEA\n5dEglbEgxWGPSNAl7LmEAw4B97TPG2exFCxW3H2KQwGinksykyUUmB/vFNcRLlxczoWLy0lnc+w7\nPMTOjkF2dQ6y9WA/v9zddaStoJGrZVGPMj+CNRJ0iQZdosEAEc8l5Dl4rkbUeq5DwBH/u4PrCCIa\ncTuCAQbjGboHU2zP5sgZvY/4Nwy6DhHPxQs4DCUzBAMO0aBLcdjT3yMYIBx0dDDwXC1u4uh9rQnI\nYjm5seLuIyKcURljd8cgoaL5dz30XIcVtcWsqC0+sm8omeFQf4KDvXG6h1L0DqfpiafoGkqxr2uY\neCpL6iRLTeCIVplyHMERcEVwRED8gUN0kDnyGab4rgPDyH4EnBFn1GMYM4zRa810fNpjY99zzMRj\nM503fQODmfnk+eYUGWdPguW9k5I/uGwxH7t+5bxf14r7GGpLwrw2R7v7bIiFApxZXcSZ1UXTtslk\nc8TTWYZTWZKZHOmsbpms8T8b0rkc2ew4mcKYMd8naM24Yz5B10EEMjlDJmvI5nL/f3v3GiNXXcZx\n/Pub6+7szHavXbbdLaWwWBpTSoNSlBeIl5TG4AuJsTGRmCZ9gwkmJgox0fhO34iSGCOJBk0MqFEj\nISZYC0bfCHKnWGrbWAKVstx6oe1eZs7ji/Of5bi9z2WHOft8ksmc85z/7vyf2bPPnv2f/5xDzYif\na1C1iFpkRBHULH79amRxzAyzuKhFVv8lrr9CvfLYwvK5CnGy8C98pd7/Dkqu8P81bfH3XPwS55zi\nqvPXxgvVzfNNne2SmrukGphpnHq9+fYMj3pxTxho4bh7q+SyGSrZTMMnYevM4mJc/4NQrUVUI1so\nufWsM4pvD1gf7qkP/eQyIpcYDspmMuSykM9kwlF8eGTiglc/wo+PzuP1erxepFVvAwvtkr/89Vh9\neSFOso3OGk9+TSOfXXCu23lxTygXc/TksszXIvJdeLLRzJirRsxUI2arNaIoLnD1wl0qZOkr5hgu\n5+grZCn35MJYepa+YpZC1k+yOpcWXtwTJDE5VOKVt08x1FfodHfOy8yYmY84NVdlrhYtHJ1WenKs\n7C8uzI4pFbLxDJlc1k+COreMeHFfZGKoxP7p9zrdjTNEZpyarXFyrhqPaQsGS3muGqswWi5S6clR\n7sl15X8czrnW8+K+yGi5SEZQi6zjHwCardY4frpK1SKyEisrRdaPVxguFxko5b2QO+fOyYv7IoVc\nhqvHKuyfPsFouWfJX39mvsbxmXlqkVEqZFk/XmHVQPwhJy/mzrmL5cX9LK4Z7+flIyeoRhG5TPsL\nanzNmDmqkVHpyXPt5ACrB3pZ0Zv3mR7OuYZ4cT+LvmKODeP97HvjeNuO3s2MEzNVTs7FnwxdP97P\n5cN9DJa8oDvnmnfBw9JwA+xpSXsSsSFJuyTtD8+DIS5J90k6EG6evbmdnW+nqbEy1Vr8AZ1WqkYR\nb56Y4cjxGfpLeW65ZozPb57gujWDDPUVvLA751riYsYcHgC2LordDew2sylgd1gHuJX41npTwE7i\nG2l3pUpPnqsvq/BOuGFGs2bma7x+7DTvnJznQ5f1c9um1XzqmjFWD/T63HLnXMtdcFjGzP4mae2i\n8OeIb70H8Avgr8A3Q/yXFl8k/h+SBiSNm9nrrerwUvrwqhUcnH6PuWpEIddYAT4xM8+J2SrlYo4t\n64aZHCo1dEMQ55y7FI2OuY8lCvYRYCwsrwZeTbR7LcTOKO6SdhIf3bNmzZoGu9FefcUcN6wb5u/7\n32TVit74AlkXIYqMd0/NMVuLWFkp8pErhhhf0dvxqZXOueWj6ROqZmbSpV+QxczuB+6H+E5Mzfaj\nXdaN9HH01Bx7Dh9jrL/nvLNnTs5WOT4zTyYjrhwtM7Wy3NSdnZxzrlGNFvc36sMtksaB6RA/DEwm\n2k2EWNeSxOY1g/TmszzzylEymfgaNPlshihxCQCA4XKBj105wurBXh96cc51VKPF/WHgDuB74fmP\nifhXJT0E3AAc69bx9iRJbFi1gsmhEv956yT/PXqak7M1clkxWi6ydmSQkUqRUsFnljrnPhguWI0k\nPUh88nRE0mvAd4iL+m8k7QBeAb4Qmv8J2AYcAE4BX2lDnzum0pNn48QAGycGLtzYOec66GJmy2w/\nx6ZPnqWtAXc22ynnnHPN8QnWzjmXQl7cnXMuhby4O+dcCnlxd865FPLi7pxzKeTF3TnnUsiLu3PO\npZCsxdcrb6gT0pvEH4ZqxAjwVgu70w085+XBc14emsn5cjMbPduGD0Rxb4akp8zs+k73Yyl5zsuD\n57w8tCtnH5ZxzrkU8uLunHMplIbifn+nO9ABnvPy4DkvD23JuevH3J1zzp0pDUfuzjnnFvHi7pxz\nKdTVxV3SVkn7JB2QdHen+9Mqkn4uaVrSnkRsSNIuSfvD82CIS9J94T14QdLmzvW8cZImJT0u6V+S\nXpJ0V4inNm9JPZKelPR8yPm7IX6FpCdCbr+WVAjxYlg/ELav7WT/GyUpK+lZSY+E9VTnCyDpkKQX\nJT0n6akQa+u+3bXFXVIW+DFwK7AB2C5pQ2d71TIPAFsXxe4GdpvZFLA7rEOc/1R47AR+skR9bLUq\n8HUz2wBsAe4MP8805z0L3GJm1wKbgK2StgDfB+41s6uAd4Edof0O4N0Qvze060Z3AXsT62nPt+4T\nZrYpMae9vfu2mXXlA7gReDSxfg9wT6f71cL81gJ7Euv7gPGwPA7sC8s/BbafrV03P4jvy/vp5ZI3\nUAKeIb738FtALsQX9nPgUeDGsJwL7dTpvl9inhOhkN0CPAIozfkm8j4EjCyKtXXf7tojd2A18Gpi\n/bUQS6sxe/9m40eAsbCcuvch/Pt9HfAEKc87DFE8B0wDu4CDwFEzq4YmybwWcg7bjwHDS9vjpv0Q\n+AYQhfVh0p1vnQF/lvS0pJ0h1tZ9+4L3UHUfPGZmklI5h1VSGfgd8DUzOy5pYVsa8zazGrBJ0gDw\nB2B9h7vUNpI+C0yb2dOSbu50f5bYTWZ2WNJKYJekl5Mb27Fvd/OR+2FgMrE+EWJp9YakcYDwPB3i\nqXkfJOWJC/uvzOz3IZz6vAHM7CjwOPGwxICk+oFXMq+FnMP2FcDbS9zVZnwcuE3SIeAh4qGZH5He\nfBeY2eHwPE38R/yjtHnf7ubi/k9gKpxpLwBfBB7ucJ/a6WHgjrB8B/GYdD3+5XCGfQtwLPGvXtdQ\nfIj+M2Cvmf0gsSm1eUsaDUfsSOolPsewl7jI3x6aLc65/l7cDjxmYVC2G5jZPWY2YWZriX9fHzOz\nL5HSfOsk9Umq1JeBzwB7aPe+3ekTDU2epNgG/Jt4nPJbne5PC/N6EHgdmCceb9tBPNa4G9gP/AUY\nCm1FPGvoIPAicH2n+99gzjcRj0u+ADwXHtvSnDewEXg25LwH+HaIrwOeBA4AvwWKId4T1g+E7es6\nnUMTud8MPLIc8g35PR8eL9VrVbv3bb/8gHPOpVA3D8s455w7By/uzjmXQl7cnXMuhby4O+dcCnlx\nd865FPLi7pxzKeTF3TnnUuh/UqIUmqqaXLUAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SdVU9NJ36_kJ",
        "colab_type": "code",
        "outputId": "cec713da-9c3c-40bc-bc8c-08a755847148",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Accuracy plots\n",
        "\n",
        "smooth_plot(accuracy_test_history_sgd, label='SGD_acc')\n",
        "smooth_plot(accuracy_test_history_adam, label='Adam_acc')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f152c1a6eb8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MhXB8o7bUwtd",
        "colab_type": "text"
      },
      "source": [
        "Through this second implementation using JAX, we can definitively appreciate how the concatenated architecture influences the performances. \n",
        "\n",
        "In particular, it's clear how SGD, despite his faster convergence both on train and test set (actually it outperforms Adam on test set loss), reaches poor results in terms of accuracy (low value and early overfitting), while Adam dramatically beahaves better."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OS89hPqLukNB",
        "colab_type": "text"
      },
      "source": [
        "### -- ***Loss, Accuracy and Training Functions (optimization from scratch)***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wpxX-ErrWz44",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def clip_loss(params, xb, yb):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to compute the Categorical Cross-Entropy Loss. Optimizing from scratch requires avoiding numerical problems,\n",
        "    so it's important to clip the current prediction to compute the loss to not have log(0) terms.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - the current estimate of net weights.\n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tCategorical Cross-Entropy computed on the current batch and net parameters.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    epsilon = 1e-9 # Clipping threshold\n",
        "    logits = net_apply(params, xb, rng=random.PRNGKey(0))\n",
        "    logits = np.clip(logits, epsilon, 1. - epsilon)\n",
        "    return -np.sum(np.log(logits)*yb)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HMvuNUFnA_e1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def clip_reg_loss(params, xb, yb, C=C):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to compute the l2-penalized Loss (using clip_loss()).\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - the current estimate of net weights.\n",
        "    xb - current batch data features.\n",
        "    yb - current batch targets.\n",
        "    C - penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tl2-penalized loss on the current batch and net parameters.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    err = loss(params, xb, yb)\n",
        "    reg = C * sum(np.vdot(x, x) for x in tree_flatten(params)[0])\n",
        "    return err + reg"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QWgSdPfOuk4R",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***SGD step***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0b5eiXJP701V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@jit\n",
        "def SGD_from_scratch(w, xb, yb, step_size,C):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to perform one SGD step.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    w - The current estimate of net weights.\n",
        "    xb - Current batch data features.\n",
        "    yb - Current batch targets.\n",
        "    step_size - SGD step size.\n",
        "    C - Penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tUpdate weights w(t+1) and last prediction y(t). \n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    # Prediction for current batch with last weights estimates\n",
        "    y = net_apply(w,xb, rng=random.PRNGKey(0))\n",
        "\n",
        "    # Flatten weights\n",
        "    w_flat, unflattener = ravel_pytree(w)\n",
        "    \n",
        "    # Gradient, Weights Estimates Update and Unflattening\n",
        "    g, _ = ravel_pytree(grad(clip_reg_loss)(w, xb, yb,C)) \n",
        "    net_params = unflattener(w_flat - step_size * g)\n",
        "\n",
        "    return net_params, y"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1MSXbw7xuzlT",
        "colab_type": "text"
      },
      "source": [
        "#### -- ***SCA step***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Rc78TrC3yz_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@jit\n",
        "def l_sca_step(w, xb, yb, step_size, rho, d, C=C):\n",
        "\n",
        "    \"\"\" \n",
        "    Function to perform one SCA step.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    w - The current estimate of net weights.\n",
        "    xb - Current batch data features.\n",
        "    yb - Current batch targets.\n",
        "    step_size - SCA step size.\n",
        "    rho - mixing parameter for vector d convex combination  (rho in [0,1]).\n",
        "    C - Penalty weighting parameter (lambda in report notation).\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tUpdate weights w(t+1), Update Statistic Tracking vector d(t+1) and last prediction y(t). \n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "\n",
        "    # Prediction for current batch with last weights estimates\n",
        "    y = net_apply(w,xb, rng=random.PRNGKey(0))\n",
        "\n",
        "    # Flatten weights\n",
        "    w_flat, unflattener = ravel_pytree(w)\n",
        "    \n",
        "    # Gradient, Weights Estimates and Statistic Tracking Updates\n",
        "    g, _ = ravel_pytree(grad(clip_loss)(w, xb, yb)) \n",
        "    w_hat = -1/C*(rho*g + (1-rho)*d)\n",
        "    net_params = unflattener(w_flat + step_size * (w_hat - w_flat))\n",
        "    d = (1-rho)*d + rho*g\n",
        "\n",
        "    return net_params,d,y"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PH93QRzj0qau",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Optimization Procedure***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWizVrxF3UGx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Algorithms parameters\n",
        "\n",
        "step_size_sca = 0.00001 # SCA Step size\n",
        "step_size_sgd = 0.0001# SGD Step size\n",
        "\n",
        "rho = .1# Mixing parameter for vector d convex combination  (rho in [0,1]).\n",
        "\n",
        "step_size_sca_eps = 0.1 # SCA Step size's diminuishing factor (in [0,1])\n",
        "step_size_sgd_eps = 0.01 # SGD Step size's diminuishing factor (in [0,1])\n",
        "\n",
        "rho_eps = 0.6 # Rho's diminuishing factor (in [0,1])\n",
        "\n",
        "max_iters = 500 # Number of Optimization steps\n",
        "\n",
        "batch_size = 32# Batch size\n",
        "\n",
        "C = 1e-1 # Penalty weight"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FeC1H9hX0rnA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initialize network\n",
        "rng = random.PRNGKey(0)\n",
        "_, net_params = net_init(rng, in_shape)\n",
        "net_params_SGD = net_params\n",
        "\n",
        "# Re-Initialize dataset\n",
        "train_loader = iter(tf.data.Dataset.from_tensor_slices((train_X, train_Y_one_hot)).shuffle(500).repeat().batch(batch_size))\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MUr3diP50rrY",
        "colab_type": "code",
        "outputId": "588e2a47-b35d-492f-dc3d-70e0f8854221",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "27b00c3dedb149f6b0bff2a200c00b89",
            "2772f3cfe1c1437498747c4ab23902aa",
            "85b03c494f9b4b6ab635f5015c73f6c6",
            "c23f44bc0a7e421db61c42616605451b",
            "f79cb8fa8adf4cd4b11e99697bd3f4dd",
            "8612e531a1304ea18841b50db87fddda",
            "9d947443cb4b4453a9ea9e5c5c2acfb4",
            "1ee1a7a4c01c477f9155b771e85c0de0"
          ]
        }
      },
      "source": [
        "# Histories Initialization\n",
        "loss_history_sca_stochastic = []\n",
        "loss_test_history_sca_stochastic = []\n",
        "loss_history_SGD_stochastic = []\n",
        "loss_test_history_SGD_stochastic = []\n",
        "accuracy_sca_test_history = [] \n",
        "accuracy_SGD_test_history = []\n",
        "\n",
        "\n",
        "d = np.zeros(n_params) # Vector d initialization\n",
        "\n",
        "# Step sizes and rho initialization\n",
        "step_size_sca_current = step_size_sca\n",
        "step_size_sgd_current = step_size_sgd\n",
        "rho_current = rho\n",
        "\n",
        "# Initialization of loading bar\n",
        "stats = {}\n",
        "bar = trange(max_iters, desc='Progression: ', unit=' iters', ncols=800, postfix=stats)\n",
        "\n",
        "# Optimize parameters in a loop \n",
        "for i in bar:\n",
        "  loss_test_history_sca_stochastic.append(clip_loss(net_params, test_X, test_Y_one_hot))\n",
        "  loss_test_history_SGD_stochastic.append(clip_loss(net_params_SGD, test_X, test_Y_one_hot))\n",
        "\n",
        "  # Batch loading and casting to numpy arrays\n",
        "  xb, yb = next(train_loader)\n",
        "  xb, yb = xb.numpy(), yb.numpy()\n",
        "  \n",
        "\n",
        "  # SCA and SGD step\n",
        "  net_params,d, y= l_sca_step(net_params, xb, yb, step_size_sca_current, rho_current, d, C=C) \n",
        "  net_params_SGD,y_SGD = SGD_from_scratch(net_params_SGD, xb, yb, step_size_sgd_current,C=C)\n",
        "\n",
        "\n",
        "  # Prediction Clipping and losses histories updating\n",
        "  epsilon = 1e-9\n",
        "  y = np.clip(y, epsilon, 1. - epsilon)\n",
        "  y_SGD = np.clip(y_SGD, epsilon, 1. - epsilon)\n",
        "  reg_term = C*(l2_norm(net_params) ** 2.0) # Penalty term\n",
        "  loss_history_sca_stochastic.append(-np.sum(np.log(y)*yb)+reg_term)\n",
        "  loss_history_SGD_stochastic.append(-np.sum(np.log(y_SGD)*yb)+reg_term)\n",
        "  accuracy_sca_test_history.append(accuracy(net_params, test_X, test_Y_one_hot))\n",
        "  accuracy_SGD_test_history.append(accuracy(net_params_SGD, test_X, test_Y_one_hot))\n",
        "\n",
        "\n",
        "  \n",
        "  # Step sizes and rho updates\n",
        "  step_size_sca_current = step_size_sca_current*(1 - step_size_sca_eps*step_size_sca_current)\n",
        "  step_size_sgd_current = step_size_sgd_current*(1 - step_size_sgd_eps*step_size_sgd_current)\n",
        "  rho_current = rho_current*(1 - rho_eps*rho_current)\n",
        "\n",
        "  # Show the current loss every two optimization steps\n",
        "  if i % 2 == 0:\n",
        "    stats.update({'Loss': loss_history_sca_stochastic[-1]})\n",
        "    bar.set_postfix(stats)\n",
        "\n",
        "bar.close()\n",
        "del bar"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "27b00c3dedb149f6b0bff2a200c00b89",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(IntProgress(value=0, description='Progression: ', layout=Layout(flex='2'), max=500, style=Progr…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1fikaqyI0rzP",
        "colab_type": "code",
        "outputId": "cfa36024-97dc-4d1a-929e-2668e48bc964",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Loss plots\n",
        "\n",
        "smooth_plot(loss_history_stochastic_sgd, label='SGD')\n",
        "smooth_plot(loss_history_stochastic_adam, label='Adam')\n",
        "smooth_plot(loss_history_SGD_stochastic, label='SGD_from_scratch')\n",
        "smooth_plot(loss_history_sca_stochastic, label='SCA')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f15277dce10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nreOll17ipptuwrZtysvLueKKKwbKP//881x00UUsW7aM9evXs2PHjoFz1113HQDLli1jyZIlTJky\nhVAoxOzZsyVV8BkgbSz3eCo+3k0QhLPHSSzssaCtrY3169ezbds2lFK4rotSio9//OMjlo/FYvzd\n3/0dmzdvZtq0adx9990DWSOBgdWcLMsa2O7fT6XEzXq6pI3l3pPsGe8mCEJa88gjj3DzzTdz6NAh\nampqqKurY9asWRQWFvKb3/wG13U5evQozz//PMCAkBcVFdHT0yMRNGeZtLHcRdwFYWxZt24dX//6\n14cdW7NmDbt27WLevHksXryY6dOnc8kllwCQl5fH3/zN37B06VLKyspYtWrVeDR70qLOhZmdK1eu\n1Js3b37X1z+852Fc7fLpBZ/GUmnzMiIIw9i1axeLFi0a72YI48RIv3+l1Bat9cqRyqeFEiqlUChi\nqdjJCwuCIEwC0kLc+4m7MqgqCIIAaSTuGi3hkIIgCD5pI+4KRcIdeUFeQRCEyUZaiHvwSCtaeyLu\ngiAIPukh7ocaCaQgmoqOd1MEQRDOCdJC3K2USyCl6U32jndTBEEQzgnSQtxVyiWQ1GK5C8JZ4N57\n72XJkiUsX76cyspKNm3aRCqV4hvf+Abz5s2jsrKSyspK7r333oFrbNumsrKSJUuWcN5553Hffffh\neSdO9nfTTTexfPlyfvjDH471I40Z3/3ud09aZqzy36fHDNWUhyOWuyCMORs3buSpp55i69athEIh\nWlpaSCQSfPOb36ShoYFt27YRDofp7u7mvvvuG7guEolQVVUFQFNTE5/5zGfo6uri29/+9oj3aWho\n4I033qC6uvqYc6lUCsc5N6TrZG357ne/yze+8Y2z2KJBzo2f0GliuS5OwqMz1YfWGqXUeDdJEMaU\n77/+fXa3jbwS0rtlYcFCvn7h109Y5ujRoxQVFQ0k+ioqKqKvr4+f//zn1NTUEA6HAcjOzubuu+8e\nsY6SkhLWrl3LqlWruPvuu0f8e73qqquor6+nsrKSH//4x9x1111UVlbyyiuvcNNNN7FmzRo+//nP\n09LSQnFxMffffz/Tp0/nc5/7HJFIhDfffJOmpiZ++ctf8sADD7Bx40YuuugifvWrX43YJtd1ue22\n29i8eTNKKT7/+c/zla98herqar7whS/Q3NyMbds8/PDD1NXVcdddd5Gfn8/u3bvZu3cv119/PXV1\n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\nTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcS78c2M7MFf",
        "colab_type": "code",
        "outputId": "25af396d-112f-45de-91f2-27b5b84e3336",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Test Loss plots\n",
        "smooth_plot(test_loss_history_stochastic_sgd, label='SGD_test')\n",
        "smooth_plot(test_loss_history_stochastic_adam, label='Adam_test')\n",
        "smooth_plot(loss_test_history_SGD_stochastic, label='SGDfs_test')\n",
        "smooth_plot(loss_test_history_sca_stochastic, label='SCA_test')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f152c2d5d68>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nwbAD+f8BuT91Kq1I4eEAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C78nSszC0sDM",
        "colab_type": "code",
        "outputId": "3196d8c2-7e91-49e4-b49a-51c4e24e2e7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# Accuracy plots\n",
        "smooth_plot(accuracy_test_history_sgd, label='SGD_acc')\n",
        "smooth_plot(accuracy_test_history_adam, label='Adam_acc')\n",
        "smooth_plot(accuracy_SGD_test_history, label='SGDfs_acc')\n",
        "smooth_plot(accuracy_sca_test_history, label='SCA_acc')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f152c4eba20>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SyYvPnN8Wk1i",
        "colab_type": "text"
      },
      "source": [
        "From the last global comparison we can notice two fundamental differences w.r.t. the concatenated architecure:\n",
        "\n",
        "1) In this case Adam is clearly the best choice.\n",
        "\n",
        "2) On a poorer model like the single Deep CNN, (Linearized Loss) SCA show its limits and its intrinsic similarity to SGD. Notice that on this CNN architecture the best SCA performances are not achived using constant stepsizes.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O9UfYGBUrHnc",
        "colab_type": "text"
      },
      "source": [
        "### -- ***Distributed Training and Test***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KeRiFcbbrgbA",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Simulation Set-Up***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mTkrRkUyreyg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def generate_random_topology(I, p):\n",
        "\n",
        "    \"\"\"\n",
        "    Function that create a random network topology with I agents and connectivity p.\n",
        "    Return a tuple with the topology (a network object) and the mixing \n",
        "    weights computed according to the Metropolis rule.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    I - Number of agents.\n",
        "    p - Probability of putting an edge.\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tTopology and Metropolis adjacency (consensus) matrix.\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "    \n",
        "    # Iterate until a connected topology is found\n",
        "    while True:\n",
        "        topology = nx.gnp_random_graph(I, p)\n",
        "        if(nx.is_connected(topology)):\n",
        "            break\n",
        "    adjacency = nx.adjacency_matrix(topology).todense()\n",
        "    \n",
        "    # Compute the mixing weights (Metropolis)\n",
        "    C = onp.zeros((I,I))\n",
        "    degrees = adjacency.sum(axis=0).T\n",
        "    for k1 in onp.arange(I):\n",
        "        for k2 in onp.arange(I):\n",
        "            if adjacency[k1,k2] == 1:\n",
        "                C[k1,k2] = 1/(onp.max([degrees[k1], degrees[k2]]) + 1)\n",
        "        C[k1,k1] = 1 - C[k1,:].sum(axis=0)\n",
        "    \n",
        "    # Return the values\n",
        "    return topology, C"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hsO0tGyjrGJ4",
        "colab_type": "code",
        "outputId": "282d099a-13f3-4936-fe51-7267ebeb5f7c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        }
      },
      "source": [
        "# Topology parameters\n",
        "\n",
        "num_agents = 1 # Number of Agents\n",
        "\n",
        "p = 0.8 # Connectivity\n",
        "\n",
        "topology, adjacency = generate_random_topology(num_agents, p) # Graph creation\n",
        "\n",
        "# Show agents' network\n",
        "plt.figure(0)\n",
        "plt.title('Network topology')\n",
        "plt.clf()\n",
        "nx.draw(topology)\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N1kHzW99vGB9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Algorithm parameters\n",
        "\n",
        "C = 1e-1 # Penalty weights\n",
        "\n",
        "step_size_sgd_dist=0.0001 # DSGD Step size"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nHXRcoGWrGUt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initialize networks\n",
        "rng = random.PRNGKey(0)\n",
        "params = []\n",
        "_, *subkeys = random.split(rng, num_agents+1)\n",
        "for l, key in zip(range(num_agents), subkeys):\n",
        "  _, net_params = net_init(rng, in_shape)\n",
        "  params.append(net_params)\n",
        "\n",
        "# Initialize optimizers\n",
        "opts = []\n",
        "for l in range(num_agents):\n",
        "  opt_init, opt_update, get_params = optimizers.sgd(step_size=step_size_sgd_dist)\n",
        "  opts.append([opt_init, opt_update, get_params])\n",
        "for l in range(num_agents):\n",
        "  opts[l][0] = opts[l][0](params[l])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wrhHhaMBt7KW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Data splitting (by examples)\n",
        "from sklearn.model_selection import KFold\n",
        "if num_agents > 1:\n",
        "  kfold = KFold(num_agents)\n",
        "  split = list(kfold.split(range(train_X.shape[0])))\n",
        "else:\n",
        "  split = [([], range(train_X.shape[0]))]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RisUmM3gt7HL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Datasets Initialization\n",
        "train_loaders = []\n",
        "for l in range(num_agents):\n",
        "  train_loaders.append(iter(tf.data.Dataset.from_tensor_slices((train_X[split[l][1]], train_Y_one_hot[split[l][1]])).repeat().shuffle(1000).batch(batch_size)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Q2m6QuKu792",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***Distributed SGD (using JAX optimization utilities)***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-pgQBRQgt7C5",
        "colab_type": "code",
        "outputId": "9970eade-0f85-4bd6-8bf4-2eb2d7d9fa09",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17,
          "referenced_widgets": [
            "6af245af53014b6aa0650968eedbab66"
          ]
        }
      },
      "source": [
        "# Histories Initialization\n",
        "loss_history_distributed_stochastic = []\n",
        "loss_test_history_distributed_stochastic = []\n",
        "\n",
        "# Loading bar Initialization\n",
        "stats = {}\n",
        "bar = trange(max_iters, desc='Progression: ', unit=' iters', ncols=800, postfix=stats)\n",
        "\n",
        "for i in bar:\n",
        "  \n",
        "  # Single-agent Losses history initialization\n",
        "  l_test_agents = onp.zeros(num_agents)\n",
        "  l_agents = onp.zeros(num_agents)\n",
        "\n",
        "  for l in range(num_agents):\n",
        "    # Each Agent makes a SGradient Step\n",
        "    \n",
        "    # Next Batch Loading\n",
        "    xb, yb = next(train_loaders[l])\n",
        "    xb, yb = xb.numpy(), yb.numpy()\n",
        "    \n",
        "    # Compute l-th Agent Current Loss\n",
        "    l_test_agents[l] = loss(params[l], test_X, test_Y_one_hot)\n",
        "\n",
        "    # l-th Agent Optimization Step\n",
        "    l_tmp, opts[l][0] = step(i, opts[l][0], opts[l][1], opts[l][2], xb, yb, C=C/num_agents) \n",
        "    \n",
        "    l_agents[l] = l_tmp[1][0] + num_agents * l_tmp[1][1]\n",
        "  \n",
        "  # Global Loss Updating\n",
        "  loss_history_distributed_stochastic.append(l_agents)\n",
        "  loss_test_history_distributed_stochastic.append(l_test_agents)\n",
        "\n",
        "\n",
        "  # Consensus Step\n",
        "  params_mat = onp.zeros((num_agents, n_params))\n",
        "  for l in range(num_agents):\n",
        "    params_mat[l, :], unflattener = ravel_pytree(opts[l][2](opts[l][0]))\n",
        "  params_mat = np.dot(adjacency, params_mat)\n",
        "  for l in range(num_agents):\n",
        "    params[l] = unflattener(params_mat[l])\n",
        "\n",
        "  if i % 2 == 0:\n",
        "    stats['loss'] = np.mean(l_agents)\n",
        "    bar.set_postfix(stats)\n",
        "\n",
        "bar.close()\n",
        "del bar"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6af245af53014b6aa0650968eedbab66",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(IntProgress(value=0, description='Progression: ', layout=Layout(flex='2'), max=500, style=Progr…"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "taIQyVQVt6-7",
        "colab_type": "code",
        "outputId": "43601cb2-93e4-4486-dd37-92faae21d983",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 232
        }
      },
      "source": [
        "# Average Loss (Train and test)\n",
        "loss_history_distributed_stochastic = np.vstack(loss_history_distributed_stochastic)\n",
        "loss_test_history_distributed_stochastic = np.vstack(loss_test_history_distributed_stochastic)\n",
        "\n",
        "# Results Plotting\n",
        "smooth_plot(loss_history_stochastic_sgd, label='SGD')\n",
        "smooth_plot(np.mean(loss_history_distributed_stochastic, axis=1), label='Dist-SGD')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-50-d3b1d5a08b23>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Results Plotting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0msmooth_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss_history_stochastic_sgd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'SGD'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0msmooth_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss_history_distributed_stochastic\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Dist-SGD'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'loss_history_stochastic_sgd' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YdOcJQ542WGK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Single agent plotting\n",
        "for i in range(num_agents):\n",
        "  smooth_plot(loss_history_distributed_stochastic[0:100, i], label='Dist-GD-Agent#' + str(i))\n",
        "plt.yscale('log')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "86WWsbGEXzka",
        "colab_type": "text"
      },
      "source": [
        "The results show the correctness of the proposed implementation and its consinstent beahviour w.r.t. the centralized procedure. In particular we can apprecciate how D-SGD approacches its centralized counterpart (in a pretty fast fashion) while single-agents disagreement vanishes and consensus is reached.\n",
        "\n",
        "The last part of the work tries to show the state-of-the-art S-NEXT algrithm. Due to the fact that this current implementation and simulation study is huge in terms of memory allocation, we tried the algorithm on a \"vanilla\" CNN using the MNIST dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZGrQRq7VmG9R",
        "colab_type": "text"
      },
      "source": [
        "#### ---  ***MNIST Data*** (for testing S-NEXT)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WWwKLvlzmIfi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Usual manipulations and processing on Data, both for Binary and Multiclass Classifications\n",
        "\n",
        "from keras.datasets import fashion_mnist \n",
        "from keras.utils import to_categorical\n",
        "\n",
        "(train_X,train_Y), (test_X,test_Y) = fashion_mnist.load_data()\n",
        "train_X.shape"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cnjC_DuLmIkK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "# Reshaping, Casting and Normalization\n",
        "train_X = train_X.reshape(-1, 28,28, 1)\n",
        "test_X = test_X.reshape(-1, 28,28, 1)\n",
        "train_X = train_X.astype('float32')\n",
        "test_X = test_X.astype('float32')\n",
        "train_X = train_X / 255\n",
        "test_X = test_X / 255\n",
        "\n",
        "\n",
        "\n",
        "train_Y_one_hot = to_categorical(train_Y)\n",
        "test_Y_one_hot = to_categorical(test_Y)\n",
        "\n",
        "\n",
        "num_classes = to_categorical(train_Y).shape[1]\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c-HRcoeyRJ-y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "rng = random.PRNGKey(0)\n",
        "\n",
        "# Vanilla cnn in jax (for testing S-NEXT):\n",
        "net_init, net_apply= stax.serial(\n",
        "      Conv(3, (3, 3), strides=(1, 1),padding = \"valid\"), Relu,\n",
        "      MaxPool((2,2)),\n",
        "      Flatten, Dense(8),Dense(10), Softmax\n",
        "      )\n",
        "in_shape = (-1,28,28,1)\n",
        "\n",
        "net_params_example = net_init(rng, in_shape)[1] # An usage example of the net_init() function for extracting w_0\n",
        "\n",
        "n_params = ravel_pytree(net_params_example)[0].shape[0] # This function vectorizes structured and complex data types \n",
        "                                                        # like net parameters and can return, as second argument,\n",
        "                                                        # a function to un-vectorize them.\n",
        "                                                        \n",
        "print('The network has ', n_params, ' parameters.')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r208qffARUrY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Data splitting (by examples)\n",
        "from sklearn.model_selection import KFold\n",
        "if num_agents > 1:\n",
        "  kfold = KFold(num_agents)\n",
        "  split = list(kfold.split(range(train_X.shape[0])))\n",
        "else:\n",
        "  split = [([], range(train_X.shape[0]))]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g9f-LCmRPqU5",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***D-SGD(from scratch)*** (not commented, redundant w.r.t. S-Next logic, used just for comparison)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3CZYImffPoI5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import jax\n",
        "\n",
        "@partial(jit, static_argnums=(7,))\n",
        "def distributed_SGD_step(params, step_size, rho, D, Davg, Gold, Pi, num_params, C=0):\n",
        "  \n",
        "  w_flat_new = np.zeros((num_agents, num_params))\n",
        "  Gnew = np.zeros((num_agents, num_params))\n",
        "  liter = np.zeros(num_agents)\n",
        "  y = []\n",
        "\n",
        "  for l in range(num_agents):\n",
        "\n",
        "    xb, yb = next(train_loaders[l])\n",
        "    xb, yb = xb.numpy(), yb.numpy()\n",
        "\n",
        "    # Prediction for current batch with last weights estimates\n",
        "    epsilon = 1e-9\n",
        "    yl = net_apply(params[l],xb)\n",
        "    yl = np.clip(yl, epsilon, 1. - epsilon)\n",
        "\n",
        "    # Flatten weights\n",
        "    w_flat, unflattener = ravel_pytree(params[l])\n",
        "  \n",
        "    # Gradient, Weights Estimates and Statistic Tracking Updates\n",
        "    g, _ = ravel_pytree(grad(clip_reg_loss)(params[l], xb, yb)) \n",
        "    w_flat_new = jax.ops.index_add(w_flat_new, jax.ops.index[l, :],w_flat - step_size * g)\n",
        "\n",
        "    liter = jax.ops.index_update(liter, l, -np.sum(np.log(yl)*yb) + C*(l2_norm(params[l]) ** 2.0))\n",
        "\n",
        "  w_flat_new = np.dot(adjacency, w_flat_new)\n",
        "  D = np.dot(adjacency, D)\n",
        "\n",
        "  for l in range(num_agents):\n",
        "    params[l] = unflattener(w_flat_new[l])\n",
        "\n",
        "    Gnew = jax.ops.index_update(Gnew, jax.ops.index[l, :], ravel_pytree(grad(loss)(params[l], xb, yb))[0])\n",
        "\n",
        "    D = jax.ops.index_add(D, jax.ops.index[l, :], (Gnew[l] - Gold[l]))\n",
        "    Pi = jax.ops.index_update(Pi, jax.ops.index[l, :], num_agents * D[l] - Gnew[l])\n",
        "    \n",
        "    Davg = jax.ops.index_update(Davg, jax.ops.index[l, :], (1 - rho)*Davg[l, :] + rho * D[l, :] * num_agents)\n",
        "\n",
        "  return params, y, D, Davg, Gnew, Pi, liter"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "58hub-hWxMFX",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***S-NEXT (from scratch)***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WfMcgfngwhcN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@partial(jit, static_argnums=(7,))\n",
        "def distributed_stochastic_sca_step(params, step_size, rho, D, Davg, Gold, Pi, num_params, C=0):\n",
        "  \n",
        "    \"\"\"\n",
        "    Function that performs one S-NEXT optimization step.\n",
        "\n",
        "    Parameters:\t\n",
        "    ----------\n",
        "\n",
        "    params - Current net parameters\n",
        "    step_size - S-NEXT current step size (alpha)\n",
        "    rho - Current mixing parameter for convex combinations (rho in [0,1]).\n",
        "    D - Collection of Last gradients deviation\n",
        "    Davg - Collection of current d_i vectors\n",
        "    Gold - Collection of Last gradients\n",
        "    Pi - Collection of current Gradient Tracking vectors\n",
        "    num_params - Number of net parameters\n",
        "    C - Penalty weight\n",
        "\n",
        "\n",
        "    ----------\n",
        "\n",
        "    Returns:\tUpdated net-parameters, D, Davg, Collection of new gradients, updated Pi, updated losses\n",
        "\n",
        "    ----------\n",
        "    \"\"\"\n",
        "  \n",
        "    # Updated variables initialization\n",
        "    w_flat_new = np.zeros((num_agents, num_params))\n",
        "    Gnew = np.zeros((num_agents, num_params))\n",
        "    liter = np.zeros(num_agents)\n",
        "    y = []\n",
        "\n",
        "    for l in range(num_agents):\n",
        "      \n",
        "      # Loading next batch\n",
        "      xb, yb = next(train_loaders[l])\n",
        "      xb, yb = xb.numpy(), yb.numpy()\n",
        "\n",
        "      # Prediction for current batch with last weights estimates\n",
        "      epsilon = 1e-9\n",
        "      yl = net_apply(params[l],xb)\n",
        "      yl = np.clip(yl, epsilon, 1. - epsilon)\n",
        "\n",
        "      # Flatten weights\n",
        "      w_flat, unflattener = ravel_pytree(params[l])\n",
        "    \n",
        "      # Gradient, Weights Estimates, Statistic and Gradient Tracking Updates\n",
        "      g, _ = ravel_pytree(grad(clip_loss)(params[l], xb, yb)) \n",
        "      w_hat = -1/C*(rho*g + (1-rho)*Davg[l, :] + rho*Pi[l,:])\n",
        "      w_flat_new = jax.ops.index_add(w_flat_new, jax.ops.index[l, :],w_flat + step_size * (w_hat - w_flat))\n",
        "      \n",
        "      # Single Agent Loss Update\n",
        "      liter = jax.ops.index_update(liter, l, -np.sum(np.log(yl)*yb) + C*(l2_norm(params[l]) ** 2.0))\n",
        "  \n",
        "    # Consensuns and variables updating\n",
        "    w_flat_new = np.dot(adjacency, w_flat_new)\n",
        "    D = np.dot(adjacency, D)\n",
        "\n",
        "    for l in range(num_agents):\n",
        "      params[l] = unflattener(w_flat_new[l])\n",
        "\n",
        "      Gnew = jax.ops.index_update(Gnew, jax.ops.index[l, :], ravel_pytree(grad(loss)(params[l], xb, yb))[0])\n",
        "\n",
        "      D = jax.ops.index_add(D, jax.ops.index[l, :], (Gnew[l] - Gold[l]))\n",
        "      Pi = jax.ops.index_update(Pi, jax.ops.index[l, :], num_agents * D[l] - Gnew[l])\n",
        "      \n",
        "      Davg = jax.ops.index_update(Davg, jax.ops.index[l, :], (1 - rho)*Davg[l, :] + rho * D[l, :] * num_agents)\n",
        "\n",
        "    return params, y, D, Davg, Gnew, Pi, liter"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BPNuVGco0axZ",
        "colab_type": "text"
      },
      "source": [
        "#### --- ***S-NEXT and D-SGD Optimization Procedure***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_uWMkSla0r81",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initialize networks\n",
        "rng = random.PRNGKey(0)\n",
        "params = []\n",
        "_, *subkeys = random.split(rng, num_agents+1)\n",
        "for l, key in zip(range(num_agents), subkeys):\n",
        "  _, net_params = net_init(rng, in_shape)\n",
        "  params.append(net_params)\n",
        "sgd_params = params\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IPPbaqWcwhXW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Datasets Re-Initializations\n",
        "batch_size = 32\n",
        "train_loaders = []\n",
        "for l in range(num_agents):\n",
        "  train_loaders.append(iter(tf.data.Dataset.from_tensor_slices((train_X[split[l][1]], train_Y_one_hot[split[l][1]])).repeat().shuffle(500).batch(batch_size)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "agnjJ7kl0r6n",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# S-NEXT Variables Initialization\n",
        "import copy\n",
        "D = np.zeros((num_agents, n_params))\n",
        "Davg = np.zeros((num_agents, n_params))\n",
        "Pi = np.zeros((num_agents, n_params))\n",
        "for l in range(num_agents):\n",
        "  D = jax.ops.index_update(D, jax.ops.index[l, :], ravel_pytree(grad(loss)(params[l], train_X[split[l][1]], train_Y_one_hot[split[l][1]]))[0])\n",
        "  Pi = jax.ops.index_update(Pi, jax.ops.index[l, :], (num_agents - 1) * D[l])\n",
        "G = copy.deepcopy(D)\n",
        "Davg = copy.deepcopy(D) * num_agents"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6_M91Yv-0r3b",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Algorithms parameters\n",
        "\n",
        "C = 1e-1 # Penalty weights\n",
        "\n",
        "step_size_sca_dist = 0.0001 # S-NEXT step-size\n",
        "\n",
        "rho = .95 # Mixing factor for convex combinations (rho in [0,1])\n",
        "\n",
        "step_size_sca_eps = 0.0001 # Diminuishing factor for S-NEXT step size\n",
        "\n",
        "rho_eps = 0.0001# Diminuishing factor for rho\n",
        "\n",
        "max_iters = 3000 # Maximum number of optimization steps"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sXaheR62PN63",
        "colab_type": "code",
        "outputId": "e8952813-5e93-415b-8e2d-8f71514df024",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17,
          "referenced_widgets": [
            "5df2e10c2d964fa395e0f52195e45754"
          ]
        }
      },
      "source": [
        "loss_history_sca_stochastic_distributed = []\n",
        "loss_test_history_sca_stochastic_distributed = []\n",
        "\n",
        "loss_history_SGD_distributed = []\n",
        "loss_test_history_SGD_distributed = []\n",
        "\n",
        "\n",
        "step_size_current = step_size_sca_dist\n",
        "rho_current = rho\n",
        "\n",
        "stats = {}\n",
        "bar = trange(max_iters, desc='Progression: ', unit=' iters', ncols=800, postfix=stats)\n",
        "i = 0\n",
        "\n",
        "for e in bar:\n",
        "\n",
        "  l_test_agents = onp.zeros(num_agents)\n",
        "  sgd_l_test_agents = onp.zeros(num_agents)\n",
        "\n",
        "  for l in range(num_agents):\n",
        "    l_test_agents[l] = clip_reg_loss(params[l], test_X, test_Y_one_hot)\n",
        "    sgd_l_test_agents[l] = clip_reg_loss(sgd_params[l], test_X, test_Y_one_hot)\n",
        "\n",
        "  loss_test_history_sca_stochastic_distributed.append(l_test_agents)\n",
        "  loss_test_history_SGD_distributed.append(sgd_l_test_agents)\n",
        "\n",
        "  params, y, D, Davg, G, Pi, l_agents = distributed_stochastic_sca_step(params, step_size_current, rho_current, D, Davg, G, Pi, n_params, C=C)\n",
        "  sgd_params, _, _, _, _, _, sgd_l_agents = distributed_SGD_step(sgd_params, step_size_current, rho_current, D, Davg, G, Pi, n_params, C=C)\n",
        "\n",
        "  step_size_current = step_size_current*(1 - step_size_sca_eps*step_size_current)\n",
        "  rho_current = rho_current*(1 - rho_eps*rho_current)\n",
        "\n",
        "  loss_history_sca_stochastic_distributed.append(l_agents)\n",
        "  loss_history_SGD_distributed.append(sgd_l_agents)\n",
        "\n",
        "  if i % 2 == 0:\n",
        "    stats.update({'Loss': np.mean(loss_history_sca_stochastic_distributed[-1])})\n",
        "    #stats.update({'Loss': np.mean(loss_history_SGD_distributed[-1])})\n",
        "    bar.set_postfix(stats)\n",
        "  \n",
        "  i = i + 1\n",
        "\n",
        "bar.close()\n",
        "del bar"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "5df2e10c2d964fa395e0f52195e45754",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(IntProgress(value=0, description='Progression: ', layout=Layout(flex='2'), max=3000, style=Prog…"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ene8i1kf1hvH",
        "colab_type": "code",
        "outputId": "2b3c3b3f-b586-4587-e6bb-9d7b182b027a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "loss_history_sca_stochastic_distributed = np.vstack(loss_history_sca_stochastic_distributed)\n",
        "loss_test_history_sca_stochastic_distributed = np.vstack(loss_test_history_sca_stochastic_distributed)\n",
        "loss_history_SGD_distributed = np.vstack(loss_history_SGD_distributed)\n",
        "loss_test_history_SGD_distributed = np.vstack(loss_test_history_SGD_distributed)\n",
        "\n",
        "smooth_plot(np.mean(loss_history_SGD_distributed, axis=1), label='Dist-SGD')\n",
        "smooth_plot(np.mean(loss_history_sca_stochastic_distributed, axis=1), label='S-NEXT')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f11d8637e48>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sfNGjf5bZJ46",
        "colab_type": "text"
      },
      "source": [
        "## - ***Conclusions, comment and possible improvements***\n",
        "\n",
        "In this work we proposed a medical imageing classification task. Moreover, we used it for testing and comparing optimization state-of-the-art algorithms and the two DL frameworks JAX and Tensor Flow. \n",
        "\n",
        "On the complete architecture we reach valid results in terms of accuracy and we show SCA (despite its simplified form) capacities. Tensor Flow utilities allow us to implement high-level code and easily perform complex operations on data and model-defining procedures.\n",
        "\n",
        "On the other hand, the fact JAX is still in a early stage  phase allows us to use only the Deep CNN part of the architecture. Despite this limitation, we reach acceptable results, underlining in this case the limits ot the Linearized Loss SCA algorithm. \n",
        "\n",
        "The powerful part of JAX is its efficiency and low-level versatility; its functional nature allows us to fastly extract nets'core elements, giving the possibility of easily implement SCA, S-NEXT and D-SGD having full control of the procedures'steps. Moreover, all of these low-level procedures are drastically faster than TF.\n",
        "\n",
        "In the last part of the work we show a preliminary simulation study for S-NEXT algorithm, comparing it to D-SGD. In particular, we propose the complete loss linearization as surrogate function due to the fact that this choice is not tested in the reference paper [3].\n",
        "\n",
        "In this case, we arrive to show the limits of using this surrogate function in a distributed scenario. It does not improve D-SGD performances and it's dramatically sensible to hyperparameters choices.\n",
        "\n",
        "Infact, possible improvements could be extending the net linearization for CNN, trying to set up a better and scalable code.\n",
        "\n",
        "For what concerns the pure application results, the main idea is using more sophisticated CNN architectures; moreover, the final goal of the task could be correctly classifying also the tumor type.\n",
        "\n",
        "A good theoretical  and practical idea for this task could be using an l1 penalization, thanks to its sparsifying power.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}